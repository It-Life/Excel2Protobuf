// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SoldierAttribute_Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ConfigData {

  /// <summary>Holder for reflection information generated from SoldierAttribute_Config.proto</summary>
  public static partial class SoldierAttributeConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for SoldierAttribute_Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SoldierAttributeConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1Tb2xkaWVyQXR0cmlidXRlX0NvbmZpZy5wcm90bxIKQ29uZmlnRGF0YSL0",
            "BAoXU29sZGllckF0dHJpYnV0ZV9Db25maWcSCgoCaWQYASABKA0SGQoRc29p",
            "bGRlcl9hcHBlYXJfaWQYAiABKA0SGwoTc29pbGRlcl9uYW1lX2dsb2JhbBgD",
            "IAEoCRIbChNzb2lsZGVyX2VwaWNfZ2xvYmFsGAQgASgJEhUKDXByb2plY3Rp",
            "bGVfaWQYBSABKA0SDAoEbWFzcxgGIAEoAhIVCg1waHlzaWNfcmFkaXVzGAcg",
            "AygCEg0KBXNjYWxlGAggASgCEhQKDHNoYWRvd19zY2FsZRgJIAMoAhIRCglt",
            "ZWxlZV9kcHMYCiABKAISEQoJcmFuZ2VfZHBzGAsgASgCEhMKC21lbGVlX3Nw",
            "ZWVkGAwgASgCEhQKDG1lbGVlX3JhZGl1cxgNIAEoAhIYChBtZWxlZV9oaXRf",
            "ZWZmZWN0GA4gAygJEhMKC3JhbmdlX3NwZWVkGA8gASgCEhQKDHJhbmdlX3Jh",
            "ZGl1cxgQIAEoAhIYChByYW5nZV9oaXRfZWZmZWN0GBEgAygJEhIKCmNoYXJn",
            "ZV9kbWcYEiABKAISGgoSY2hhcmdlX2FuaW1fZWZmZWN0GBMgASgJEh4KFmNo",
            "YXJnZV9hbmltX2VmZmVjdF9oaXQYFCABKAkSEgoKY3JpX2RhbWFnZRgVIAEo",
            "AhITCgtkZWFkX21vcmFsZRgWIAEoAhIKCgJocBgXIAEoAhIOCgZhdHRhY2sY",
            "GCABKAISEwoLcmVhbF9hdHRhY2sYGSABKAISEQoJYWN0aXZlX2lkGBogAygN",
            "Eg4KBnJlc2lzdBgbIAEoAhINCgVkb2RnZRgcIAEoAhILCgNjcmkYHSABKAIi",
            "/AIKE1NvbGRpZXJfRGF0YV9Db25maWcSCgoCaWQYASABKA0SEwoLZGVidWdf",
            "bGV2ZWwYAiABKAUSDwoHaHBfYmFzZRgDIAEoAhIRCglocF9ncm93dGgYBCAB",
            "KAISEwoLYXR0YWNrX2Jhc2UYBSABKAISFQoNYXR0YWNrX2dyb3d0aBgGIAEo",
            "AhIYChByZWFsX2F0dGFja19iYXNlGAcgASgCEhoKEnJlYWxfYXR0YWNrX2dy",
            "b3d0aBgIIAEoAhIUCgxkZWZlbmNlX2Jhc2UYCSABKAISFgoOZGVmZW5jZV9n",
            "cm93dGgYCiABKAISEgoKZG9kZ2VfYmFzZRgLIAEoAhIUCgxkb2RnZV9ncm93",
            "dGgYDCABKAISFQoNY3JpdGljYWxfYmFzZRgNIAEoAhIXCg9jcml0aWNhbF9n",
            "cm93dGgYDiABKAISGQoRY29ucXVlcl90aW1lX2Jhc2UYDyABKAISGwoTY29u",
            "cXVlcl90aW1lX2dyb3d0aBgQIAEoAiKNAQoTU29sZGllcl9Hcm93X0NvbmZp",
            "ZxIKCgJpZBgBIAEoDRIMCgR0eXBlGAIgASgFEhQKDGhlcm9fcXVhbGl0eRgD",
            "IAEoDRINCgVsZXZlbBgEIAEoDRINCgVjb3VudBgFIAEoDRISCgpoZXJvX2xl",
            "dmVsGAYgASgNEhQKDHVwX21hdGVyaWFscxgHIAMoDSKLBQocU29sZGllckF0",
            "dHJpYnV0ZV9Db25maWdfRGF0YRJwCh1Tb2xkaWVyQXR0cmlidXRlX0NvbmZp",
            "Z19pdGVtcxgBIAMoCzJJLkNvbmZpZ0RhdGEuU29sZGllckF0dHJpYnV0ZV9D",
            "b25maWdfRGF0YS5Tb2xkaWVyQXR0cmlidXRlQ29uZmlnSXRlbXNFbnRyeRJn",
            "ChlTb2xkaWVyX0RhdGFfQ29uZmlnX2l0ZW1zGAIgAygLMkQuQ29uZmlnRGF0",
            "YS5Tb2xkaWVyQXR0cmlidXRlX0NvbmZpZ19EYXRhLlNvbGRpZXJEYXRhQ29u",
            "ZmlnSXRlbXNFbnRyeRJnChlTb2xkaWVyX0dyb3dfQ29uZmlnX2l0ZW1zGAMg",
            "AygLMkQuQ29uZmlnRGF0YS5Tb2xkaWVyQXR0cmlidXRlX0NvbmZpZ19EYXRh",
            "LlNvbGRpZXJHcm93Q29uZmlnSXRlbXNFbnRyeRpnCiBTb2xkaWVyQXR0cmli",
            "dXRlQ29uZmlnSXRlbXNFbnRyeRILCgNrZXkYASABKA0SMgoFdmFsdWUYAiAB",
            "KAsyIy5Db25maWdEYXRhLlNvbGRpZXJBdHRyaWJ1dGVfQ29uZmlnOgI4ARpe",
            "ChtTb2xkaWVyRGF0YUNvbmZpZ0l0ZW1zRW50cnkSCwoDa2V5GAEgASgNEi4K",
            "BXZhbHVlGAIgASgLMh8uQ29uZmlnRGF0YS5Tb2xkaWVyX0RhdGFfQ29uZmln",
            "OgI4ARpeChtTb2xkaWVyR3Jvd0NvbmZpZ0l0ZW1zRW50cnkSCwoDa2V5GAEg",
            "ASgNEi4KBXZhbHVlGAIgASgLMh8uQ29uZmlnRGF0YS5Tb2xkaWVyX0dyb3df",
            "Q29uZmlnOgI4AUIjCiFjb20udHJpbml0aWdhbWVzLnNlcnZlci5jb25mLmF1",
            "dG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.SoldierAttribute_Config), global::ConfigData.SoldierAttribute_Config.Parser, new[]{ "Id", "SoilderAppearId", "SoilderNameGlobal", "SoilderEpicGlobal", "ProjectileId", "Mass", "PhysicRadius", "Scale", "ShadowScale", "MeleeDps", "RangeDps", "MeleeSpeed", "MeleeRadius", "MeleeHitEffect", "RangeSpeed", "RangeRadius", "RangeHitEffect", "ChargeDmg", "ChargeAnimEffect", "ChargeAnimEffectHit", "CriDamage", "DeadMorale", "Hp", "Attack", "RealAttack", "ActiveId", "Resist", "Dodge", "Cri" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Soldier_Data_Config), global::ConfigData.Soldier_Data_Config.Parser, new[]{ "Id", "DebugLevel", "HpBase", "HpGrowth", "AttackBase", "AttackGrowth", "RealAttackBase", "RealAttackGrowth", "DefenceBase", "DefenceGrowth", "DodgeBase", "DodgeGrowth", "CriticalBase", "CriticalGrowth", "ConquerTimeBase", "ConquerTimeGrowth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Soldier_Grow_Config), global::ConfigData.Soldier_Grow_Config.Parser, new[]{ "Id", "Type", "HeroQuality", "Level", "Count", "HeroLevel", "UpMaterials" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.SoldierAttribute_Config_Data), global::ConfigData.SoldierAttribute_Config_Data.Parser, new[]{ "SoldierAttributeConfigItems", "SoldierDataConfigItems", "SoldierGrowConfigItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SoldierAttribute_Config : pb::IMessage<SoldierAttribute_Config> {
    private static readonly pb::MessageParser<SoldierAttribute_Config> _parser = new pb::MessageParser<SoldierAttribute_Config>(() => new SoldierAttribute_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoldierAttribute_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SoldierAttributeConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoldierAttribute_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoldierAttribute_Config(SoldierAttribute_Config other) : this() {
      id_ = other.id_;
      soilderAppearId_ = other.soilderAppearId_;
      soilderNameGlobal_ = other.soilderNameGlobal_;
      soilderEpicGlobal_ = other.soilderEpicGlobal_;
      projectileId_ = other.projectileId_;
      mass_ = other.mass_;
      physicRadius_ = other.physicRadius_.Clone();
      scale_ = other.scale_;
      shadowScale_ = other.shadowScale_.Clone();
      meleeDps_ = other.meleeDps_;
      rangeDps_ = other.rangeDps_;
      meleeSpeed_ = other.meleeSpeed_;
      meleeRadius_ = other.meleeRadius_;
      meleeHitEffect_ = other.meleeHitEffect_.Clone();
      rangeSpeed_ = other.rangeSpeed_;
      rangeRadius_ = other.rangeRadius_;
      rangeHitEffect_ = other.rangeHitEffect_.Clone();
      chargeDmg_ = other.chargeDmg_;
      chargeAnimEffect_ = other.chargeAnimEffect_;
      chargeAnimEffectHit_ = other.chargeAnimEffectHit_;
      criDamage_ = other.criDamage_;
      deadMorale_ = other.deadMorale_;
      hp_ = other.hp_;
      attack_ = other.attack_;
      realAttack_ = other.realAttack_;
      activeId_ = other.activeId_.Clone();
      resist_ = other.resist_;
      dodge_ = other.dodge_;
      cri_ = other.cri_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoldierAttribute_Config Clone() {
      return new SoldierAttribute_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "soilder_appear_id" field.</summary>
    public const int SoilderAppearIdFieldNumber = 2;
    private uint soilderAppearId_;
    /// <summary>
    ///* 士兵外表id（索引Apperance_Config） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SoilderAppearId {
      get { return soilderAppearId_; }
      set {
        soilderAppearId_ = value;
      }
    }

    /// <summary>Field number for the "soilder_name_global" field.</summary>
    public const int SoilderNameGlobalFieldNumber = 3;
    private string soilderNameGlobal_ = "";
    /// <summary>
    ///* 士兵名称语言包 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoilderNameGlobal {
      get { return soilderNameGlobal_; }
      set {
        soilderNameGlobal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "soilder_epic_global" field.</summary>
    public const int SoilderEpicGlobalFieldNumber = 4;
    private string soilderEpicGlobal_ = "";
    /// <summary>
    ///* 士兵描述语言(索引多语言表) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SoilderEpicGlobal {
      get { return soilderEpicGlobal_; }
      set {
        soilderEpicGlobal_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "projectile_id" field.</summary>
    public const int ProjectileIdFieldNumber = 5;
    private uint projectileId_;
    /// <summary>
    ///* 飞行功能ID(子弹ID) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ProjectileId {
      get { return projectileId_; }
      set {
        projectileId_ = value;
      }
    }

    /// <summary>Field number for the "mass" field.</summary>
    public const int MassFieldNumber = 6;
    private float mass_;
    /// <summary>
    ///* 质量(决定战斗中物体是否能被推动) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mass {
      get { return mass_; }
      set {
        mass_ = value;
      }
    }

    /// <summary>Field number for the "physic_radius" field.</summary>
    public const int PhysicRadiusFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_physicRadius_codec
        = pb::FieldCodec.ForFloat(58);
    private readonly pbc::RepeatedField<float> physicRadius_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 物理碰撞范围(敌人|队员|友军) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PhysicRadius {
      get { return physicRadius_; }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 8;
    private float scale_;
    /// <summary>
    ///* 模型缩放比例 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "shadow_scale" field.</summary>
    public const int ShadowScaleFieldNumber = 9;
    private static readonly pb::FieldCodec<float> _repeated_shadowScale_codec
        = pb::FieldCodec.ForFloat(74);
    private readonly pbc::RepeatedField<float> shadowScale_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 影子缩放比例（长|宽） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ShadowScale {
      get { return shadowScale_; }
    }

    /// <summary>Field number for the "melee_dps" field.</summary>
    public const int MeleeDpsFieldNumber = 10;
    private float meleeDps_;
    /// <summary>
    ///* 近战攻击力 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeleeDps {
      get { return meleeDps_; }
      set {
        meleeDps_ = value;
      }
    }

    /// <summary>Field number for the "range_dps" field.</summary>
    public const int RangeDpsFieldNumber = 11;
    private float rangeDps_;
    /// <summary>
    ///* 远程攻击力 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeDps {
      get { return rangeDps_; }
      set {
        rangeDps_ = value;
      }
    }

    /// <summary>Field number for the "melee_speed" field.</summary>
    public const int MeleeSpeedFieldNumber = 12;
    private float meleeSpeed_;
    /// <summary>
    ///* 近战攻击速度(单位:秒) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeleeSpeed {
      get { return meleeSpeed_; }
      set {
        meleeSpeed_ = value;
      }
    }

    /// <summary>Field number for the "melee_radius" field.</summary>
    public const int MeleeRadiusFieldNumber = 13;
    private float meleeRadius_;
    /// <summary>
    ///* 近战范围攻击半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeleeRadius {
      get { return meleeRadius_; }
      set {
        meleeRadius_ = value;
      }
    }

    /// <summary>Field number for the "melee_hit_effect" field.</summary>
    public const int MeleeHitEffectFieldNumber = 14;
    private static readonly pb::FieldCodec<string> _repeated_meleeHitEffect_codec
        = pb::FieldCodec.ForString(114);
    private readonly pbc::RepeatedField<string> meleeHitEffect_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 近战击中特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MeleeHitEffect {
      get { return meleeHitEffect_; }
    }

    /// <summary>Field number for the "range_speed" field.</summary>
    public const int RangeSpeedFieldNumber = 15;
    private float rangeSpeed_;
    /// <summary>
    ///* 远程攻击速度(单位:秒) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeSpeed {
      get { return rangeSpeed_; }
      set {
        rangeSpeed_ = value;
      }
    }

    /// <summary>Field number for the "range_radius" field.</summary>
    public const int RangeRadiusFieldNumber = 16;
    private float rangeRadius_;
    /// <summary>
    ///* 远程伤害半径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeRadius {
      get { return rangeRadius_; }
      set {
        rangeRadius_ = value;
      }
    }

    /// <summary>Field number for the "range_hit_effect" field.</summary>
    public const int RangeHitEffectFieldNumber = 17;
    private static readonly pb::FieldCodec<string> _repeated_rangeHitEffect_codec
        = pb::FieldCodec.ForString(138);
    private readonly pbc::RepeatedField<string> rangeHitEffect_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 远程击中特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RangeHitEffect {
      get { return rangeHitEffect_; }
    }

    /// <summary>Field number for the "charge_dmg" field.</summary>
    public const int ChargeDmgFieldNumber = 18;
    private float chargeDmg_;
    /// <summary>
    ///* 冲锋伤害(|0.1表示10%概率直接撞死) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeDmg {
      get { return chargeDmg_; }
      set {
        chargeDmg_ = value;
      }
    }

    /// <summary>Field number for the "charge_anim_effect" field.</summary>
    public const int ChargeAnimEffectFieldNumber = 19;
    private string chargeAnimEffect_ = "";
    /// <summary>
    ///* 冲锋特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChargeAnimEffect {
      get { return chargeAnimEffect_; }
      set {
        chargeAnimEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "charge_anim_effect_hit" field.</summary>
    public const int ChargeAnimEffectHitFieldNumber = 20;
    private string chargeAnimEffectHit_ = "";
    /// <summary>
    ///* 冲锋击中特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChargeAnimEffectHit {
      get { return chargeAnimEffectHit_; }
      set {
        chargeAnimEffectHit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cri_damage" field.</summary>
    public const int CriDamageFieldNumber = 21;
    private float criDamage_;
    /// <summary>
    ///* 暴击伤害加成 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CriDamage {
      get { return criDamage_; }
      set {
        criDamage_ = value;
      }
    }

    /// <summary>Field number for the "dead_morale" field.</summary>
    public const int DeadMoraleFieldNumber = 22;
    private float deadMorale_;
    /// <summary>
    ///* 士兵死亡扣除士气 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeadMorale {
      get { return deadMorale_; }
      set {
        deadMorale_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 23;
    private float hp_;
    /// <summary>
    ///* 血量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "attack" field.</summary>
    public const int AttackFieldNumber = 24;
    private float attack_;
    /// <summary>
    ///* 攻击力系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "real_attack" field.</summary>
    public const int RealAttackFieldNumber = 25;
    private float realAttack_;
    /// <summary>
    ///* 真实攻击系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealAttack {
      get { return realAttack_; }
      set {
        realAttack_ = value;
      }
    }

    /// <summary>Field number for the "active_id" field.</summary>
    public const int ActiveIdFieldNumber = 26;
    private static readonly pb::FieldCodec<uint> _repeated_activeId_codec
        = pb::FieldCodec.ForUInt32(210);
    private readonly pbc::RepeatedField<uint> activeId_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 主动技能ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ActiveId {
      get { return activeId_; }
    }

    /// <summary>Field number for the "resist" field.</summary>
    public const int ResistFieldNumber = 27;
    private float resist_;
    /// <summary>
    ///* 法防 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Resist {
      get { return resist_; }
      set {
        resist_ = value;
      }
    }

    /// <summary>Field number for the "dodge" field.</summary>
    public const int DodgeFieldNumber = 28;
    private float dodge_;
    /// <summary>
    ///* 闪避率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Dodge {
      get { return dodge_; }
      set {
        dodge_ = value;
      }
    }

    /// <summary>Field number for the "cri" field.</summary>
    public const int CriFieldNumber = 29;
    private float cri_;
    /// <summary>
    ///* 暴击率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Cri {
      get { return cri_; }
      set {
        cri_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoldierAttribute_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoldierAttribute_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SoilderAppearId != other.SoilderAppearId) return false;
      if (SoilderNameGlobal != other.SoilderNameGlobal) return false;
      if (SoilderEpicGlobal != other.SoilderEpicGlobal) return false;
      if (ProjectileId != other.ProjectileId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mass, other.Mass)) return false;
      if(!physicRadius_.Equals(other.physicRadius_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if(!shadowScale_.Equals(other.shadowScale_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeleeDps, other.MeleeDps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeDps, other.RangeDps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeleeSpeed, other.MeleeSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeleeRadius, other.MeleeRadius)) return false;
      if(!meleeHitEffect_.Equals(other.meleeHitEffect_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeSpeed, other.RangeSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeRadius, other.RangeRadius)) return false;
      if(!rangeHitEffect_.Equals(other.rangeHitEffect_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeDmg, other.ChargeDmg)) return false;
      if (ChargeAnimEffect != other.ChargeAnimEffect) return false;
      if (ChargeAnimEffectHit != other.ChargeAnimEffectHit) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CriDamage, other.CriDamage)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeadMorale, other.DeadMorale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Hp, other.Hp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Attack, other.Attack)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RealAttack, other.RealAttack)) return false;
      if(!activeId_.Equals(other.activeId_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Resist, other.Resist)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Dodge, other.Dodge)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Cri, other.Cri)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (SoilderAppearId != 0) hash ^= SoilderAppearId.GetHashCode();
      if (SoilderNameGlobal.Length != 0) hash ^= SoilderNameGlobal.GetHashCode();
      if (SoilderEpicGlobal.Length != 0) hash ^= SoilderEpicGlobal.GetHashCode();
      if (ProjectileId != 0) hash ^= ProjectileId.GetHashCode();
      if (Mass != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mass);
      hash ^= physicRadius_.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      hash ^= shadowScale_.GetHashCode();
      if (MeleeDps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeleeDps);
      if (RangeDps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeDps);
      if (MeleeSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeleeSpeed);
      if (MeleeRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeleeRadius);
      hash ^= meleeHitEffect_.GetHashCode();
      if (RangeSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeSpeed);
      if (RangeRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeRadius);
      hash ^= rangeHitEffect_.GetHashCode();
      if (ChargeDmg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeDmg);
      if (ChargeAnimEffect.Length != 0) hash ^= ChargeAnimEffect.GetHashCode();
      if (ChargeAnimEffectHit.Length != 0) hash ^= ChargeAnimEffectHit.GetHashCode();
      if (CriDamage != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CriDamage);
      if (DeadMorale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeadMorale);
      if (Hp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Hp);
      if (Attack != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Attack);
      if (RealAttack != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RealAttack);
      hash ^= activeId_.GetHashCode();
      if (Resist != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Resist);
      if (Dodge != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Dodge);
      if (Cri != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Cri);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (SoilderAppearId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SoilderAppearId);
      }
      if (SoilderNameGlobal.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SoilderNameGlobal);
      }
      if (SoilderEpicGlobal.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SoilderEpicGlobal);
      }
      if (ProjectileId != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ProjectileId);
      }
      if (Mass != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Mass);
      }
      physicRadius_.WriteTo(output, _repeated_physicRadius_codec);
      if (Scale != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Scale);
      }
      shadowScale_.WriteTo(output, _repeated_shadowScale_codec);
      if (MeleeDps != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(MeleeDps);
      }
      if (RangeDps != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(RangeDps);
      }
      if (MeleeSpeed != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(MeleeSpeed);
      }
      if (MeleeRadius != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(MeleeRadius);
      }
      meleeHitEffect_.WriteTo(output, _repeated_meleeHitEffect_codec);
      if (RangeSpeed != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(RangeSpeed);
      }
      if (RangeRadius != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(RangeRadius);
      }
      rangeHitEffect_.WriteTo(output, _repeated_rangeHitEffect_codec);
      if (ChargeDmg != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(ChargeDmg);
      }
      if (ChargeAnimEffect.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ChargeAnimEffect);
      }
      if (ChargeAnimEffectHit.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(ChargeAnimEffectHit);
      }
      if (CriDamage != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(CriDamage);
      }
      if (DeadMorale != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(DeadMorale);
      }
      if (Hp != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(Hp);
      }
      if (Attack != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(Attack);
      }
      if (RealAttack != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(RealAttack);
      }
      activeId_.WriteTo(output, _repeated_activeId_codec);
      if (Resist != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(Resist);
      }
      if (Dodge != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(Dodge);
      }
      if (Cri != 0F) {
        output.WriteRawTag(237, 1);
        output.WriteFloat(Cri);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (SoilderAppearId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SoilderAppearId);
      }
      if (SoilderNameGlobal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoilderNameGlobal);
      }
      if (SoilderEpicGlobal.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SoilderEpicGlobal);
      }
      if (ProjectileId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ProjectileId);
      }
      if (Mass != 0F) {
        size += 1 + 4;
      }
      size += physicRadius_.CalculateSize(_repeated_physicRadius_codec);
      if (Scale != 0F) {
        size += 1 + 4;
      }
      size += shadowScale_.CalculateSize(_repeated_shadowScale_codec);
      if (MeleeDps != 0F) {
        size += 1 + 4;
      }
      if (RangeDps != 0F) {
        size += 1 + 4;
      }
      if (MeleeSpeed != 0F) {
        size += 1 + 4;
      }
      if (MeleeRadius != 0F) {
        size += 1 + 4;
      }
      size += meleeHitEffect_.CalculateSize(_repeated_meleeHitEffect_codec);
      if (RangeSpeed != 0F) {
        size += 1 + 4;
      }
      if (RangeRadius != 0F) {
        size += 2 + 4;
      }
      size += rangeHitEffect_.CalculateSize(_repeated_rangeHitEffect_codec);
      if (ChargeDmg != 0F) {
        size += 2 + 4;
      }
      if (ChargeAnimEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChargeAnimEffect);
      }
      if (ChargeAnimEffectHit.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChargeAnimEffectHit);
      }
      if (CriDamage != 0F) {
        size += 2 + 4;
      }
      if (DeadMorale != 0F) {
        size += 2 + 4;
      }
      if (Hp != 0F) {
        size += 2 + 4;
      }
      if (Attack != 0F) {
        size += 2 + 4;
      }
      if (RealAttack != 0F) {
        size += 2 + 4;
      }
      size += activeId_.CalculateSize(_repeated_activeId_codec);
      if (Resist != 0F) {
        size += 2 + 4;
      }
      if (Dodge != 0F) {
        size += 2 + 4;
      }
      if (Cri != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoldierAttribute_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.SoilderAppearId != 0) {
        SoilderAppearId = other.SoilderAppearId;
      }
      if (other.SoilderNameGlobal.Length != 0) {
        SoilderNameGlobal = other.SoilderNameGlobal;
      }
      if (other.SoilderEpicGlobal.Length != 0) {
        SoilderEpicGlobal = other.SoilderEpicGlobal;
      }
      if (other.ProjectileId != 0) {
        ProjectileId = other.ProjectileId;
      }
      if (other.Mass != 0F) {
        Mass = other.Mass;
      }
      physicRadius_.Add(other.physicRadius_);
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      shadowScale_.Add(other.shadowScale_);
      if (other.MeleeDps != 0F) {
        MeleeDps = other.MeleeDps;
      }
      if (other.RangeDps != 0F) {
        RangeDps = other.RangeDps;
      }
      if (other.MeleeSpeed != 0F) {
        MeleeSpeed = other.MeleeSpeed;
      }
      if (other.MeleeRadius != 0F) {
        MeleeRadius = other.MeleeRadius;
      }
      meleeHitEffect_.Add(other.meleeHitEffect_);
      if (other.RangeSpeed != 0F) {
        RangeSpeed = other.RangeSpeed;
      }
      if (other.RangeRadius != 0F) {
        RangeRadius = other.RangeRadius;
      }
      rangeHitEffect_.Add(other.rangeHitEffect_);
      if (other.ChargeDmg != 0F) {
        ChargeDmg = other.ChargeDmg;
      }
      if (other.ChargeAnimEffect.Length != 0) {
        ChargeAnimEffect = other.ChargeAnimEffect;
      }
      if (other.ChargeAnimEffectHit.Length != 0) {
        ChargeAnimEffectHit = other.ChargeAnimEffectHit;
      }
      if (other.CriDamage != 0F) {
        CriDamage = other.CriDamage;
      }
      if (other.DeadMorale != 0F) {
        DeadMorale = other.DeadMorale;
      }
      if (other.Hp != 0F) {
        Hp = other.Hp;
      }
      if (other.Attack != 0F) {
        Attack = other.Attack;
      }
      if (other.RealAttack != 0F) {
        RealAttack = other.RealAttack;
      }
      activeId_.Add(other.activeId_);
      if (other.Resist != 0F) {
        Resist = other.Resist;
      }
      if (other.Dodge != 0F) {
        Dodge = other.Dodge;
      }
      if (other.Cri != 0F) {
        Cri = other.Cri;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            SoilderAppearId = input.ReadUInt32();
            break;
          }
          case 26: {
            SoilderNameGlobal = input.ReadString();
            break;
          }
          case 34: {
            SoilderEpicGlobal = input.ReadString();
            break;
          }
          case 40: {
            ProjectileId = input.ReadUInt32();
            break;
          }
          case 53: {
            Mass = input.ReadFloat();
            break;
          }
          case 58:
          case 61: {
            physicRadius_.AddEntriesFrom(input, _repeated_physicRadius_codec);
            break;
          }
          case 69: {
            Scale = input.ReadFloat();
            break;
          }
          case 74:
          case 77: {
            shadowScale_.AddEntriesFrom(input, _repeated_shadowScale_codec);
            break;
          }
          case 85: {
            MeleeDps = input.ReadFloat();
            break;
          }
          case 93: {
            RangeDps = input.ReadFloat();
            break;
          }
          case 101: {
            MeleeSpeed = input.ReadFloat();
            break;
          }
          case 109: {
            MeleeRadius = input.ReadFloat();
            break;
          }
          case 114: {
            meleeHitEffect_.AddEntriesFrom(input, _repeated_meleeHitEffect_codec);
            break;
          }
          case 125: {
            RangeSpeed = input.ReadFloat();
            break;
          }
          case 133: {
            RangeRadius = input.ReadFloat();
            break;
          }
          case 138: {
            rangeHitEffect_.AddEntriesFrom(input, _repeated_rangeHitEffect_codec);
            break;
          }
          case 149: {
            ChargeDmg = input.ReadFloat();
            break;
          }
          case 154: {
            ChargeAnimEffect = input.ReadString();
            break;
          }
          case 162: {
            ChargeAnimEffectHit = input.ReadString();
            break;
          }
          case 173: {
            CriDamage = input.ReadFloat();
            break;
          }
          case 181: {
            DeadMorale = input.ReadFloat();
            break;
          }
          case 189: {
            Hp = input.ReadFloat();
            break;
          }
          case 197: {
            Attack = input.ReadFloat();
            break;
          }
          case 205: {
            RealAttack = input.ReadFloat();
            break;
          }
          case 210:
          case 208: {
            activeId_.AddEntriesFrom(input, _repeated_activeId_codec);
            break;
          }
          case 221: {
            Resist = input.ReadFloat();
            break;
          }
          case 229: {
            Dodge = input.ReadFloat();
            break;
          }
          case 237: {
            Cri = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Soldier_Data_Config : pb::IMessage<Soldier_Data_Config> {
    private static readonly pb::MessageParser<Soldier_Data_Config> _parser = new pb::MessageParser<Soldier_Data_Config>(() => new Soldier_Data_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Soldier_Data_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SoldierAttributeConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Soldier_Data_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Soldier_Data_Config(Soldier_Data_Config other) : this() {
      id_ = other.id_;
      debugLevel_ = other.debugLevel_;
      hpBase_ = other.hpBase_;
      hpGrowth_ = other.hpGrowth_;
      attackBase_ = other.attackBase_;
      attackGrowth_ = other.attackGrowth_;
      realAttackBase_ = other.realAttackBase_;
      realAttackGrowth_ = other.realAttackGrowth_;
      defenceBase_ = other.defenceBase_;
      defenceGrowth_ = other.defenceGrowth_;
      dodgeBase_ = other.dodgeBase_;
      dodgeGrowth_ = other.dodgeGrowth_;
      criticalBase_ = other.criticalBase_;
      criticalGrowth_ = other.criticalGrowth_;
      conquerTimeBase_ = other.conquerTimeBase_;
      conquerTimeGrowth_ = other.conquerTimeGrowth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Soldier_Data_Config Clone() {
      return new Soldier_Data_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "debug_level" field.</summary>
    public const int DebugLevelFieldNumber = 2;
    private int debugLevel_;
    /// <summary>
    ///* 士兵测试等级(如果填X则用玩家数据，填了数字则用数字覆盖玩家数据） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DebugLevel {
      get { return debugLevel_; }
      set {
        debugLevel_ = value;
      }
    }

    /// <summary>Field number for the "hp_base" field.</summary>
    public const int HpBaseFieldNumber = 3;
    private float hpBase_;
    /// <summary>
    ///* 血量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HpBase {
      get { return hpBase_; }
      set {
        hpBase_ = value;
      }
    }

    /// <summary>Field number for the "hp_growth" field.</summary>
    public const int HpGrowthFieldNumber = 4;
    private float hpGrowth_;
    /// <summary>
    ///* 血量成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HpGrowth {
      get { return hpGrowth_; }
      set {
        hpGrowth_ = value;
      }
    }

    /// <summary>Field number for the "attack_base" field.</summary>
    public const int AttackBaseFieldNumber = 5;
    private float attackBase_;
    /// <summary>
    ///* 攻击值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackBase {
      get { return attackBase_; }
      set {
        attackBase_ = value;
      }
    }

    /// <summary>Field number for the "attack_growth" field.</summary>
    public const int AttackGrowthFieldNumber = 6;
    private float attackGrowth_;
    /// <summary>
    ///* 攻击成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackGrowth {
      get { return attackGrowth_; }
      set {
        attackGrowth_ = value;
      }
    }

    /// <summary>Field number for the "real_attack_base" field.</summary>
    public const int RealAttackBaseFieldNumber = 7;
    private float realAttackBase_;
    /// <summary>
    ///* 真实伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealAttackBase {
      get { return realAttackBase_; }
      set {
        realAttackBase_ = value;
      }
    }

    /// <summary>Field number for the "real_attack_growth" field.</summary>
    public const int RealAttackGrowthFieldNumber = 8;
    private float realAttackGrowth_;
    /// <summary>
    ///* 真实伤害成长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealAttackGrowth {
      get { return realAttackGrowth_; }
      set {
        realAttackGrowth_ = value;
      }
    }

    /// <summary>Field number for the "defence_base" field.</summary>
    public const int DefenceBaseFieldNumber = 9;
    private float defenceBase_;
    /// <summary>
    ///* 防御 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefenceBase {
      get { return defenceBase_; }
      set {
        defenceBase_ = value;
      }
    }

    /// <summary>Field number for the "defence_growth" field.</summary>
    public const int DefenceGrowthFieldNumber = 10;
    private float defenceGrowth_;
    /// <summary>
    ///* 防御成长洗漱 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefenceGrowth {
      get { return defenceGrowth_; }
      set {
        defenceGrowth_ = value;
      }
    }

    /// <summary>Field number for the "dodge_base" field.</summary>
    public const int DodgeBaseFieldNumber = 11;
    private float dodgeBase_;
    /// <summary>
    ///* 闪避值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeBase {
      get { return dodgeBase_; }
      set {
        dodgeBase_ = value;
      }
    }

    /// <summary>Field number for the "dodge_growth" field.</summary>
    public const int DodgeGrowthFieldNumber = 12;
    private float dodgeGrowth_;
    /// <summary>
    ///* 闪避成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeGrowth {
      get { return dodgeGrowth_; }
      set {
        dodgeGrowth_ = value;
      }
    }

    /// <summary>Field number for the "critical_base" field.</summary>
    public const int CriticalBaseFieldNumber = 13;
    private float criticalBase_;
    /// <summary>
    ///* 暴击值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CriticalBase {
      get { return criticalBase_; }
      set {
        criticalBase_ = value;
      }
    }

    /// <summary>Field number for the "critical_growth" field.</summary>
    public const int CriticalGrowthFieldNumber = 14;
    private float criticalGrowth_;
    /// <summary>
    ///* 暴击成长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CriticalGrowth {
      get { return criticalGrowth_; }
      set {
        criticalGrowth_ = value;
      }
    }

    /// <summary>Field number for the "conquer_time_base" field.</summary>
    public const int ConquerTimeBaseFieldNumber = 15;
    private float conquerTimeBase_;
    /// <summary>
    ///* 基础征服时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConquerTimeBase {
      get { return conquerTimeBase_; }
      set {
        conquerTimeBase_ = value;
      }
    }

    /// <summary>Field number for the "conquer_time_growth" field.</summary>
    public const int ConquerTimeGrowthFieldNumber = 16;
    private float conquerTimeGrowth_;
    /// <summary>
    ///* 征服时间成长 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ConquerTimeGrowth {
      get { return conquerTimeGrowth_; }
      set {
        conquerTimeGrowth_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Soldier_Data_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Soldier_Data_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (DebugLevel != other.DebugLevel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HpBase, other.HpBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HpGrowth, other.HpGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackBase, other.AttackBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackGrowth, other.AttackGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RealAttackBase, other.RealAttackBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RealAttackGrowth, other.RealAttackGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefenceBase, other.DefenceBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefenceGrowth, other.DefenceGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeBase, other.DodgeBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DodgeGrowth, other.DodgeGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CriticalBase, other.CriticalBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CriticalGrowth, other.CriticalGrowth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConquerTimeBase, other.ConquerTimeBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ConquerTimeGrowth, other.ConquerTimeGrowth)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (DebugLevel != 0) hash ^= DebugLevel.GetHashCode();
      if (HpBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HpBase);
      if (HpGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HpGrowth);
      if (AttackBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackBase);
      if (AttackGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackGrowth);
      if (RealAttackBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RealAttackBase);
      if (RealAttackGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RealAttackGrowth);
      if (DefenceBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefenceBase);
      if (DefenceGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefenceGrowth);
      if (DodgeBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeBase);
      if (DodgeGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DodgeGrowth);
      if (CriticalBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CriticalBase);
      if (CriticalGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CriticalGrowth);
      if (ConquerTimeBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConquerTimeBase);
      if (ConquerTimeGrowth != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ConquerTimeGrowth);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (DebugLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DebugLevel);
      }
      if (HpBase != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(HpBase);
      }
      if (HpGrowth != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(HpGrowth);
      }
      if (AttackBase != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(AttackBase);
      }
      if (AttackGrowth != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(AttackGrowth);
      }
      if (RealAttackBase != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RealAttackBase);
      }
      if (RealAttackGrowth != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RealAttackGrowth);
      }
      if (DefenceBase != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DefenceBase);
      }
      if (DefenceGrowth != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(DefenceGrowth);
      }
      if (DodgeBase != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(DodgeBase);
      }
      if (DodgeGrowth != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(DodgeGrowth);
      }
      if (CriticalBase != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(CriticalBase);
      }
      if (CriticalGrowth != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(CriticalGrowth);
      }
      if (ConquerTimeBase != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(ConquerTimeBase);
      }
      if (ConquerTimeGrowth != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(ConquerTimeGrowth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (DebugLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DebugLevel);
      }
      if (HpBase != 0F) {
        size += 1 + 4;
      }
      if (HpGrowth != 0F) {
        size += 1 + 4;
      }
      if (AttackBase != 0F) {
        size += 1 + 4;
      }
      if (AttackGrowth != 0F) {
        size += 1 + 4;
      }
      if (RealAttackBase != 0F) {
        size += 1 + 4;
      }
      if (RealAttackGrowth != 0F) {
        size += 1 + 4;
      }
      if (DefenceBase != 0F) {
        size += 1 + 4;
      }
      if (DefenceGrowth != 0F) {
        size += 1 + 4;
      }
      if (DodgeBase != 0F) {
        size += 1 + 4;
      }
      if (DodgeGrowth != 0F) {
        size += 1 + 4;
      }
      if (CriticalBase != 0F) {
        size += 1 + 4;
      }
      if (CriticalGrowth != 0F) {
        size += 1 + 4;
      }
      if (ConquerTimeBase != 0F) {
        size += 1 + 4;
      }
      if (ConquerTimeGrowth != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Soldier_Data_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.DebugLevel != 0) {
        DebugLevel = other.DebugLevel;
      }
      if (other.HpBase != 0F) {
        HpBase = other.HpBase;
      }
      if (other.HpGrowth != 0F) {
        HpGrowth = other.HpGrowth;
      }
      if (other.AttackBase != 0F) {
        AttackBase = other.AttackBase;
      }
      if (other.AttackGrowth != 0F) {
        AttackGrowth = other.AttackGrowth;
      }
      if (other.RealAttackBase != 0F) {
        RealAttackBase = other.RealAttackBase;
      }
      if (other.RealAttackGrowth != 0F) {
        RealAttackGrowth = other.RealAttackGrowth;
      }
      if (other.DefenceBase != 0F) {
        DefenceBase = other.DefenceBase;
      }
      if (other.DefenceGrowth != 0F) {
        DefenceGrowth = other.DefenceGrowth;
      }
      if (other.DodgeBase != 0F) {
        DodgeBase = other.DodgeBase;
      }
      if (other.DodgeGrowth != 0F) {
        DodgeGrowth = other.DodgeGrowth;
      }
      if (other.CriticalBase != 0F) {
        CriticalBase = other.CriticalBase;
      }
      if (other.CriticalGrowth != 0F) {
        CriticalGrowth = other.CriticalGrowth;
      }
      if (other.ConquerTimeBase != 0F) {
        ConquerTimeBase = other.ConquerTimeBase;
      }
      if (other.ConquerTimeGrowth != 0F) {
        ConquerTimeGrowth = other.ConquerTimeGrowth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            DebugLevel = input.ReadInt32();
            break;
          }
          case 29: {
            HpBase = input.ReadFloat();
            break;
          }
          case 37: {
            HpGrowth = input.ReadFloat();
            break;
          }
          case 45: {
            AttackBase = input.ReadFloat();
            break;
          }
          case 53: {
            AttackGrowth = input.ReadFloat();
            break;
          }
          case 61: {
            RealAttackBase = input.ReadFloat();
            break;
          }
          case 69: {
            RealAttackGrowth = input.ReadFloat();
            break;
          }
          case 77: {
            DefenceBase = input.ReadFloat();
            break;
          }
          case 85: {
            DefenceGrowth = input.ReadFloat();
            break;
          }
          case 93: {
            DodgeBase = input.ReadFloat();
            break;
          }
          case 101: {
            DodgeGrowth = input.ReadFloat();
            break;
          }
          case 109: {
            CriticalBase = input.ReadFloat();
            break;
          }
          case 117: {
            CriticalGrowth = input.ReadFloat();
            break;
          }
          case 125: {
            ConquerTimeBase = input.ReadFloat();
            break;
          }
          case 133: {
            ConquerTimeGrowth = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Soldier_Grow_Config : pb::IMessage<Soldier_Grow_Config> {
    private static readonly pb::MessageParser<Soldier_Grow_Config> _parser = new pb::MessageParser<Soldier_Grow_Config>(() => new Soldier_Grow_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Soldier_Grow_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SoldierAttributeConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Soldier_Grow_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Soldier_Grow_Config(Soldier_Grow_Config other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      heroQuality_ = other.heroQuality_;
      level_ = other.level_;
      count_ = other.count_;
      heroLevel_ = other.heroLevel_;
      upMaterials_ = other.upMaterials_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Soldier_Grow_Config Clone() {
      return new Soldier_Grow_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private int type_;
    /// <summary>
    ///* 士兵类型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "hero_quality" field.</summary>
    public const int HeroQualityFieldNumber = 3;
    private uint heroQuality_;
    /// <summary>
    ///* 英雄品质 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroQuality {
      get { return heroQuality_; }
      set {
        heroQuality_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 4;
    private uint level_;
    /// <summary>
    ///* 等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 5;
    private uint count_;
    /// <summary>
    ///* 数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "hero_level" field.</summary>
    public const int HeroLevelFieldNumber = 6;
    private uint heroLevel_;
    /// <summary>
    ///* 英雄等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HeroLevel {
      get { return heroLevel_; }
      set {
        heroLevel_ = value;
      }
    }

    /// <summary>Field number for the "up_materials" field.</summary>
    public const int UpMaterialsFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_upMaterials_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> upMaterials_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 升级材料 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> UpMaterials {
      get { return upMaterials_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Soldier_Grow_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Soldier_Grow_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (HeroQuality != other.HeroQuality) return false;
      if (Level != other.Level) return false;
      if (Count != other.Count) return false;
      if (HeroLevel != other.HeroLevel) return false;
      if(!upMaterials_.Equals(other.upMaterials_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (HeroQuality != 0) hash ^= HeroQuality.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (HeroLevel != 0) hash ^= HeroLevel.GetHashCode();
      hash ^= upMaterials_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Type);
      }
      if (HeroQuality != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(HeroQuality);
      }
      if (Level != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Level);
      }
      if (Count != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Count);
      }
      if (HeroLevel != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(HeroLevel);
      }
      upMaterials_.WriteTo(output, _repeated_upMaterials_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (HeroQuality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroQuality);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
      }
      if (HeroLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HeroLevel);
      }
      size += upMaterials_.CalculateSize(_repeated_upMaterials_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Soldier_Grow_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.HeroQuality != 0) {
        HeroQuality = other.HeroQuality;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.HeroLevel != 0) {
        HeroLevel = other.HeroLevel;
      }
      upMaterials_.Add(other.upMaterials_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Type = input.ReadInt32();
            break;
          }
          case 24: {
            HeroQuality = input.ReadUInt32();
            break;
          }
          case 32: {
            Level = input.ReadUInt32();
            break;
          }
          case 40: {
            Count = input.ReadUInt32();
            break;
          }
          case 48: {
            HeroLevel = input.ReadUInt32();
            break;
          }
          case 58:
          case 56: {
            upMaterials_.AddEntriesFrom(input, _repeated_upMaterials_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SoldierAttribute_Config_Data : pb::IMessage<SoldierAttribute_Config_Data> {
    private static readonly pb::MessageParser<SoldierAttribute_Config_Data> _parser = new pb::MessageParser<SoldierAttribute_Config_Data>(() => new SoldierAttribute_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoldierAttribute_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.SoldierAttributeConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoldierAttribute_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoldierAttribute_Config_Data(SoldierAttribute_Config_Data other) : this() {
      soldierAttributeConfigItems_ = other.soldierAttributeConfigItems_.Clone();
      soldierDataConfigItems_ = other.soldierDataConfigItems_.Clone();
      soldierGrowConfigItems_ = other.soldierGrowConfigItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoldierAttribute_Config_Data Clone() {
      return new SoldierAttribute_Config_Data(this);
    }

    /// <summary>Field number for the "SoldierAttribute_Config_items" field.</summary>
    public const int SoldierAttributeConfigItemsFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::ConfigData.SoldierAttribute_Config>.Codec _map_soldierAttributeConfigItems_codec
        = new pbc::MapField<uint, global::ConfigData.SoldierAttribute_Config>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::ConfigData.SoldierAttribute_Config.Parser), 10);
    private readonly pbc::MapField<uint, global::ConfigData.SoldierAttribute_Config> soldierAttributeConfigItems_ = new pbc::MapField<uint, global::ConfigData.SoldierAttribute_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::ConfigData.SoldierAttribute_Config> SoldierAttributeConfigItems {
      get { return soldierAttributeConfigItems_; }
    }

    /// <summary>Field number for the "Soldier_Data_Config_items" field.</summary>
    public const int SoldierDataConfigItemsFieldNumber = 2;
    private static readonly pbc::MapField<uint, global::ConfigData.Soldier_Data_Config>.Codec _map_soldierDataConfigItems_codec
        = new pbc::MapField<uint, global::ConfigData.Soldier_Data_Config>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::ConfigData.Soldier_Data_Config.Parser), 18);
    private readonly pbc::MapField<uint, global::ConfigData.Soldier_Data_Config> soldierDataConfigItems_ = new pbc::MapField<uint, global::ConfigData.Soldier_Data_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::ConfigData.Soldier_Data_Config> SoldierDataConfigItems {
      get { return soldierDataConfigItems_; }
    }

    /// <summary>Field number for the "Soldier_Grow_Config_items" field.</summary>
    public const int SoldierGrowConfigItemsFieldNumber = 3;
    private static readonly pbc::MapField<uint, global::ConfigData.Soldier_Grow_Config>.Codec _map_soldierGrowConfigItems_codec
        = new pbc::MapField<uint, global::ConfigData.Soldier_Grow_Config>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::ConfigData.Soldier_Grow_Config.Parser), 26);
    private readonly pbc::MapField<uint, global::ConfigData.Soldier_Grow_Config> soldierGrowConfigItems_ = new pbc::MapField<uint, global::ConfigData.Soldier_Grow_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::ConfigData.Soldier_Grow_Config> SoldierGrowConfigItems {
      get { return soldierGrowConfigItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoldierAttribute_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoldierAttribute_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!SoldierAttributeConfigItems.Equals(other.SoldierAttributeConfigItems)) return false;
      if (!SoldierDataConfigItems.Equals(other.SoldierDataConfigItems)) return false;
      if (!SoldierGrowConfigItems.Equals(other.SoldierGrowConfigItems)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= SoldierAttributeConfigItems.GetHashCode();
      hash ^= SoldierDataConfigItems.GetHashCode();
      hash ^= SoldierGrowConfigItems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      soldierAttributeConfigItems_.WriteTo(output, _map_soldierAttributeConfigItems_codec);
      soldierDataConfigItems_.WriteTo(output, _map_soldierDataConfigItems_codec);
      soldierGrowConfigItems_.WriteTo(output, _map_soldierGrowConfigItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += soldierAttributeConfigItems_.CalculateSize(_map_soldierAttributeConfigItems_codec);
      size += soldierDataConfigItems_.CalculateSize(_map_soldierDataConfigItems_codec);
      size += soldierGrowConfigItems_.CalculateSize(_map_soldierGrowConfigItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoldierAttribute_Config_Data other) {
      if (other == null) {
        return;
      }
      soldierAttributeConfigItems_.Add(other.soldierAttributeConfigItems_);
      soldierDataConfigItems_.Add(other.soldierDataConfigItems_);
      soldierGrowConfigItems_.Add(other.soldierGrowConfigItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            soldierAttributeConfigItems_.AddEntriesFrom(input, _map_soldierAttributeConfigItems_codec);
            break;
          }
          case 18: {
            soldierDataConfigItems_.AddEntriesFrom(input, _map_soldierDataConfigItems_codec);
            break;
          }
          case 26: {
            soldierGrowConfigItems_.AddEntriesFrom(input, _map_soldierGrowConfigItems_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
