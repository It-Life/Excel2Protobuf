// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TeamLogical_Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ConfigData {

  /// <summary>Holder for reflection information generated from TeamLogical_Config.proto</summary>
  public static partial class TeamLogicalConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for TeamLogical_Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TeamLogicalConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhUZWFtTG9naWNhbF9Db25maWcucHJvdG8SCkNvbmZpZ0RhdGEijggKElRl",
            "YW1Mb2dpY2FsX0NvbmZpZxIKCgJpZBgBIAEoDRIRCglmb3JtYXRpb24YAiAB",
            "KA0SEQoJYWxsdGl0dWRlGAMgASgFEhoKEnRlYW1fYmFubmVyX2hlaWdodBgE",
            "IAEoBRIXCg9mb3JtYXRpb25fc3BhY2UYBSADKAISDwoHYXRrX2ZseRgGIAEo",
            "DRIVCg1yYW5kb21fb2Zmc2V0GAcgASgCEhEKCXJlc3RyYWludBgIIAMoDRIU",
            "CgxiZV9yZXN0cmFpbnQYCSADKA0SEgoKd2Fsa19zcGVlZBgKIAEoAhIUCgxj",
            "aGFyZ2Vfc3BlZWQYCyABKAISFAoMY2hhcmdlX3JhbmdlGAwgASgCEhcKD2No",
            "YXJnZV9kaXNfcGx1cxgNIAEoAhIZChFjaGFyZ2Vfc3RvcF9kZWxheRgOIAEo",
            "AhIfChdjaGFyZ2VfZW5kX3JlZ3JvdXBfdGltZRgPIAEoAhIVCg1yZWNoYWdl",
            "X3JhbmdlGBAgASgCEhEKCWNoYXJnZV9jZBgRIAEoAhIcChRjaGFyZ2VfaGl0",
            "YmFja19yYXRpbxgSIAMoAhIZChFjaGFyZ2VfdGltZV9yYW5nZRgTIAEoAhIP",
            "CgdoaXRfZmx5GBQgASgIEhEKCXJhbmdlX2RpcxgVIAMoAhIXCg9yYW5nZWF0",
            "a19yYW5kb20YFiABKAISEwoLYXRrX29ic3RjYWwYFyABKA0SEQoJYWxlcnRf",
            "ZGlzGBggASgCEhAKCHZpZXdfZGlzGBkgASgCEg4KBnJhbmdlchgaIAEoCBIe",
            "ChZiYXR0bGVfZm9ybWF0aW9uX3NwYWNlGBsgASgCEhQKDHJhbmdlX3dhbmRl",
            "chgcIAEoAhIcChRjaGFyZ2VfaW1wYWN0X2lnbm9yZRgdIAEoCBIKCgJhaRge",
            "IAEoDRIXCg9mb3JtYXRpb25fZml4ZWQYHyABKAgSGAoQc2F2bG9fdGltZV9y",
            "YW5nZRggIAEoAhIOCgZoZWFsZXIYISABKAgSFgoOY2hhcmdlX2luX2xpbmUY",
            "IiABKAgSDQoFc25lYWsYIyABKAgSGQoRcmFuZ2VfY2hhcmdlX2JvbWIYJCAD",
            "KAkSFAoMY2hhcmdlX3NvdW5kGCUgASgJEhIKCm1vdmVfc291bmQYJiABKAkS",
            "EgoKdmlld19yYWljZRgnIAEoAhISCgpzbmlwZV90aW1lGCggASgCEhoKEmNo",
            "YXJnZV9qdW1wX2hlaWdodBgpIAEoAhIYChB0YXJfYXJtb3JfaWdub3JlGCog",
            "ASgIEhMKC29jY3VweV9yYXRlGCsgASgFEg8KB2xpbmtfaHAYLCABKAgSGQoR",
            "dGVhbV9oaWRlX3Bhc3NpdmUYLSADKA0SEwoLaXNfYnVpbGRpbmcYLiABKAgi",
            "jwEKGUNsYXNzaWZ5X0NhbGNfUmF0ZV9Db25maWcSCgoCaWQYASABKA0SFAoM",
            "YXRrX2NsYXNzaWZ5GAIgASgNEhEKCWF0a192YWx1ZRgDIAEoAhIUCgxkZWZf",
            "Y2xhc3NpZnkYBCABKA0SEQoJZGVmX3ZhbHVlGAUgASgCEhQKDGNsYXNzaWZ5",
            "X2RlcxgGIAEoCSJ+ChVUZWFtX0Zvcm1hdGlvbl9Db25maWcSCgoCaWQYASAB",
            "KA0SEQoJZm9ybWF0aW9uGAIgASgJEhUKDW1hcF9mb3JtYXRpb24YAyABKAkS",
            "EwoLaGVyb19vZmZzZXQYBCABKAISGgoSZGVwb2x5X3RlYW1fb2Zmc2V0GAUg",
            "ASgCIoEFChdUZWFtTG9naWNhbF9Db25maWdfRGF0YRJhChhUZWFtTG9naWNh",
            "bF9Db25maWdfaXRlbXMYASADKAsyPy5Db25maWdEYXRhLlRlYW1Mb2dpY2Fs",
            "X0NvbmZpZ19EYXRhLlRlYW1Mb2dpY2FsQ29uZmlnSXRlbXNFbnRyeRJtCh9D",
            "bGFzc2lmeV9DYWxjX1JhdGVfQ29uZmlnX2l0ZW1zGAIgAygLMkQuQ29uZmln",
            "RGF0YS5UZWFtTG9naWNhbF9Db25maWdfRGF0YS5DbGFzc2lmeUNhbGNSYXRl",
            "Q29uZmlnSXRlbXNFbnRyeRJmChtUZWFtX0Zvcm1hdGlvbl9Db25maWdfaXRl",
            "bXMYAyADKAsyQS5Db25maWdEYXRhLlRlYW1Mb2dpY2FsX0NvbmZpZ19EYXRh",
            "LlRlYW1Gb3JtYXRpb25Db25maWdJdGVtc0VudHJ5Gl0KG1RlYW1Mb2dpY2Fs",
            "Q29uZmlnSXRlbXNFbnRyeRILCgNrZXkYASABKA0SLQoFdmFsdWUYAiABKAsy",
            "Hi5Db25maWdEYXRhLlRlYW1Mb2dpY2FsX0NvbmZpZzoCOAEaaQogQ2xhc3Np",
            "ZnlDYWxjUmF0ZUNvbmZpZ0l0ZW1zRW50cnkSCwoDa2V5GAEgASgNEjQKBXZh",
            "bHVlGAIgASgLMiUuQ29uZmlnRGF0YS5DbGFzc2lmeV9DYWxjX1JhdGVfQ29u",
            "ZmlnOgI4ARpiCh1UZWFtRm9ybWF0aW9uQ29uZmlnSXRlbXNFbnRyeRILCgNr",
            "ZXkYASABKA0SMAoFdmFsdWUYAiABKAsyIS5Db25maWdEYXRhLlRlYW1fRm9y",
            "bWF0aW9uX0NvbmZpZzoCOAFCIwohY29tLnRyaW5pdGlnYW1lcy5zZXJ2ZXIu",
            "Y29uZi5hdXRvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.TeamLogical_Config), global::ConfigData.TeamLogical_Config.Parser, new[]{ "Id", "Formation", "Alltitude", "TeamBannerHeight", "FormationSpace", "AtkFly", "RandomOffset", "Restraint", "BeRestraint", "WalkSpeed", "ChargeSpeed", "ChargeRange", "ChargeDisPlus", "ChargeStopDelay", "ChargeEndRegroupTime", "RechageRange", "ChargeCd", "ChargeHitbackRatio", "ChargeTimeRange", "HitFly", "RangeDis", "RangeatkRandom", "AtkObstcal", "AlertDis", "ViewDis", "Ranger", "BattleFormationSpace", "RangeWander", "ChargeImpactIgnore", "Ai", "FormationFixed", "SavloTimeRange", "Healer", "ChargeInLine", "Sneak", "RangeChargeBomb", "ChargeSound", "MoveSound", "ViewRaice", "SnipeTime", "ChargeJumpHeight", "TarArmorIgnore", "OccupyRate", "LinkHp", "TeamHidePassive", "IsBuilding" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Classify_Calc_Rate_Config), global::ConfigData.Classify_Calc_Rate_Config.Parser, new[]{ "Id", "AtkClassify", "AtkValue", "DefClassify", "DefValue", "ClassifyDes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Team_Formation_Config), global::ConfigData.Team_Formation_Config.Parser, new[]{ "Id", "Formation", "MapFormation", "HeroOffset", "DepolyTeamOffset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.TeamLogical_Config_Data), global::ConfigData.TeamLogical_Config_Data.Parser, new[]{ "TeamLogicalConfigItems", "ClassifyCalcRateConfigItems", "TeamFormationConfigItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TeamLogical_Config : pb::IMessage<TeamLogical_Config> {
    private static readonly pb::MessageParser<TeamLogical_Config> _parser = new pb::MessageParser<TeamLogical_Config>(() => new TeamLogical_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamLogical_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.TeamLogicalConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamLogical_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamLogical_Config(TeamLogical_Config other) : this() {
      id_ = other.id_;
      formation_ = other.formation_;
      alltitude_ = other.alltitude_;
      teamBannerHeight_ = other.teamBannerHeight_;
      formationSpace_ = other.formationSpace_.Clone();
      atkFly_ = other.atkFly_;
      randomOffset_ = other.randomOffset_;
      restraint_ = other.restraint_.Clone();
      beRestraint_ = other.beRestraint_.Clone();
      walkSpeed_ = other.walkSpeed_;
      chargeSpeed_ = other.chargeSpeed_;
      chargeRange_ = other.chargeRange_;
      chargeDisPlus_ = other.chargeDisPlus_;
      chargeStopDelay_ = other.chargeStopDelay_;
      chargeEndRegroupTime_ = other.chargeEndRegroupTime_;
      rechageRange_ = other.rechageRange_;
      chargeCd_ = other.chargeCd_;
      chargeHitbackRatio_ = other.chargeHitbackRatio_.Clone();
      chargeTimeRange_ = other.chargeTimeRange_;
      hitFly_ = other.hitFly_;
      rangeDis_ = other.rangeDis_.Clone();
      rangeatkRandom_ = other.rangeatkRandom_;
      atkObstcal_ = other.atkObstcal_;
      alertDis_ = other.alertDis_;
      viewDis_ = other.viewDis_;
      ranger_ = other.ranger_;
      battleFormationSpace_ = other.battleFormationSpace_;
      rangeWander_ = other.rangeWander_;
      chargeImpactIgnore_ = other.chargeImpactIgnore_;
      ai_ = other.ai_;
      formationFixed_ = other.formationFixed_;
      savloTimeRange_ = other.savloTimeRange_;
      healer_ = other.healer_;
      chargeInLine_ = other.chargeInLine_;
      sneak_ = other.sneak_;
      rangeChargeBomb_ = other.rangeChargeBomb_.Clone();
      chargeSound_ = other.chargeSound_;
      moveSound_ = other.moveSound_;
      viewRaice_ = other.viewRaice_;
      snipeTime_ = other.snipeTime_;
      chargeJumpHeight_ = other.chargeJumpHeight_;
      tarArmorIgnore_ = other.tarArmorIgnore_;
      occupyRate_ = other.occupyRate_;
      linkHp_ = other.linkHp_;
      teamHidePassive_ = other.teamHidePassive_.Clone();
      isBuilding_ = other.isBuilding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamLogical_Config Clone() {
      return new TeamLogical_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "formation" field.</summary>
    public const int FormationFieldNumber = 2;
    private uint formation_;
    /// <summary>
    ///* 阵型id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Formation {
      get { return formation_; }
      set {
        formation_ = value;
      }
    }

    /// <summary>Field number for the "alltitude" field.</summary>
    public const int AlltitudeFieldNumber = 3;
    private int alltitude_;
    /// <summary>
    ///* 飞行高度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Alltitude {
      get { return alltitude_; }
      set {
        alltitude_ = value;
      }
    }

    /// <summary>Field number for the "team_banner_height" field.</summary>
    public const int TeamBannerHeightFieldNumber = 4;
    private int teamBannerHeight_;
    /// <summary>
    ///* 旗帜高度（优先使用Hero表里的旗帜高度，如果没有则使用Team表） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TeamBannerHeight {
      get { return teamBannerHeight_; }
      set {
        teamBannerHeight_ = value;
      }
    }

    /// <summary>Field number for the "formation_space" field.</summary>
    public const int FormationSpaceFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_formationSpace_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> formationSpace_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 士兵间距(左右|前后) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FormationSpace {
      get { return formationSpace_; }
    }

    /// <summary>Field number for the "atk_fly" field.</summary>
    public const int AtkFlyFieldNumber = 6;
    private uint atkFly_;
    /// <summary>
    ///* 空中攻击属性
    ///(1 只攻击地面 2 只攻击空中 3 空中地面都可以） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtkFly {
      get { return atkFly_; }
      set {
        atkFly_ = value;
      }
    }

    /// <summary>Field number for the "random_offset" field.</summary>
    public const int RandomOffsetFieldNumber = 7;
    private float randomOffset_;
    /// <summary>
    ///* 站位随机偏移 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RandomOffset {
      get { return randomOffset_; }
      set {
        randomOffset_ = value;
      }
    }

    /// <summary>Field number for the "restraint" field.</summary>
    public const int RestraintFieldNumber = 8;
    private static readonly pb::FieldCodec<uint> _repeated_restraint_codec
        = pb::FieldCodec.ForUInt32(66);
    private readonly pbc::RepeatedField<uint> restraint_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 克制目标兵种(UI显示) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Restraint {
      get { return restraint_; }
    }

    /// <summary>Field number for the "be_restraint" field.</summary>
    public const int BeRestraintFieldNumber = 9;
    private static readonly pb::FieldCodec<uint> _repeated_beRestraint_codec
        = pb::FieldCodec.ForUInt32(74);
    private readonly pbc::RepeatedField<uint> beRestraint_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 被目标克制兵种(UI显示) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> BeRestraint {
      get { return beRestraint_; }
    }

    /// <summary>Field number for the "walk_speed" field.</summary>
    public const int WalkSpeedFieldNumber = 10;
    private float walkSpeed_;
    /// <summary>
    ///* 移动速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WalkSpeed {
      get { return walkSpeed_; }
      set {
        walkSpeed_ = value;
      }
    }

    /// <summary>Field number for the "charge_speed" field.</summary>
    public const int ChargeSpeedFieldNumber = 11;
    private float chargeSpeed_;
    /// <summary>
    ///* 冲锋速度 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeSpeed {
      get { return chargeSpeed_; }
      set {
        chargeSpeed_ = value;
      }
    }

    /// <summary>Field number for the "charge_range" field.</summary>
    public const int ChargeRangeFieldNumber = 12;
    private float chargeRange_;
    /// <summary>
    ///* 冲锋范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeRange {
      get { return chargeRange_; }
      set {
        chargeRange_ = value;
      }
    }

    /// <summary>Field number for the "charge_dis_plus" field.</summary>
    public const int ChargeDisPlusFieldNumber = 13;
    private float chargeDisPlus_;
    /// <summary>
    ///* 真实冲锋距离增强（只影响队伍能冲多远加成0是冲锋到目标队伍位置，而不是判定） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeDisPlus {
      get { return chargeDisPlus_; }
      set {
        chargeDisPlus_ = value;
      }
    }

    /// <summary>Field number for the "charge_stop_delay" field.</summary>
    public const int ChargeStopDelayFieldNumber = 14;
    private float chargeStopDelay_;
    /// <summary>
    ///* 冲锋撞到敌人后停止延迟 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeStopDelay {
      get { return chargeStopDelay_; }
      set {
        chargeStopDelay_ = value;
      }
    }

    /// <summary>Field number for the "charge_end_regroup_time" field.</summary>
    public const int ChargeEndRegroupTimeFieldNumber = 15;
    private float chargeEndRegroupTime_;
    /// <summary>
    ///* 冲锋结束后整队时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeEndRegroupTime {
      get { return chargeEndRegroupTime_; }
      set {
        chargeEndRegroupTime_ = value;
      }
    }

    /// <summary>Field number for the "rechage_range" field.</summary>
    public const int RechageRangeFieldNumber = 16;
    private float rechageRange_;
    /// <summary>
    ///* 当近战时队伍位置离开范围后开始追击（反复重复） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RechageRange {
      get { return rechageRange_; }
      set {
        rechageRange_ = value;
      }
    }

    /// <summary>Field number for the "charge_cd" field.</summary>
    public const int ChargeCdFieldNumber = 17;
    private float chargeCd_;
    /// <summary>
    ///* 冲锋冷却 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeCd {
      get { return chargeCd_; }
      set {
        chargeCd_ = value;
      }
    }

    /// <summary>Field number for the "charge_hitback_ratio" field.</summary>
    public const int ChargeHitbackRatioFieldNumber = 18;
    private static readonly pb::FieldCodec<float> _repeated_chargeHitbackRatio_codec
        = pb::FieldCodec.ForFloat(146);
    private readonly pbc::RepeatedField<float> chargeHitbackRatio_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 冲锋击退概率(概率|水平速度|垂直速度|水平速度(死亡)|垂直速度(死亡)） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ChargeHitbackRatio {
      get { return chargeHitbackRatio_; }
    }

    /// <summary>Field number for the "charge_time_range" field.</summary>
    public const int ChargeTimeRangeFieldNumber = 19;
    private float chargeTimeRange_;
    /// <summary>
    ///* 冲锋时间（在该时间内所有队员完成冲锋） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeTimeRange {
      get { return chargeTimeRange_; }
      set {
        chargeTimeRange_ = value;
      }
    }

    /// <summary>Field number for the "hit_fly" field.</summary>
    public const int HitFlyFieldNumber = 20;
    private bool hitFly_;
    /// <summary>
    ///* 是否会被击飞 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HitFly {
      get { return hitFly_; }
      set {
        hitFly_ = value;
      }
    }

    /// <summary>Field number for the "range_dis" field.</summary>
    public const int RangeDisFieldNumber = 21;
    private static readonly pb::FieldCodec<float> _repeated_rangeDis_codec
        = pb::FieldCodec.ForFloat(170);
    private readonly pbc::RepeatedField<float> rangeDis_ = new pbc::RepeatedField<float>();
    /// <summary>
    ///* 远程攻击范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RangeDis {
      get { return rangeDis_; }
    }

    /// <summary>Field number for the "rangeatk_random" field.</summary>
    public const int RangeatkRandomFieldNumber = 22;
    private float rangeatkRandom_;
    /// <summary>
    ///* 远程击中目标后随机落点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeatkRandom {
      get { return rangeatkRandom_; }
      set {
        rangeatkRandom_ = value;
      }
    }

    /// <summary>Field number for the "atk_obstcal" field.</summary>
    public const int AtkObstcalFieldNumber = 23;
    private uint atkObstcal_;
    /// <summary>
    ///* 攻击目标索敌进攻被障碍物遮挡参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtkObstcal {
      get { return atkObstcal_; }
      set {
        atkObstcal_ = value;
      }
    }

    /// <summary>Field number for the "alert_dis" field.</summary>
    public const int AlertDisFieldNumber = 24;
    private float alertDis_;
    /// <summary>
    ///* 强制攻击范围(强制攻击范围|被索敌范围) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AlertDis {
      get { return alertDis_; }
      set {
        alertDis_ = value;
      }
    }

    /// <summary>Field number for the "view_dis" field.</summary>
    public const int ViewDisFieldNumber = 25;
    private float viewDis_;
    /// <summary>
    ///* 索敌范围（初始） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ViewDis {
      get { return viewDis_; }
      set {
        viewDis_ = value;
      }
    }

    /// <summary>Field number for the "ranger" field.</summary>
    public const int RangerFieldNumber = 26;
    private bool ranger_;
    /// <summary>
    ///* 移动中射击 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ranger {
      get { return ranger_; }
      set {
        ranger_ = value;
      }
    }

    /// <summary>Field number for the "battle_formation_space" field.</summary>
    public const int BattleFormationSpaceFieldNumber = 27;
    private float battleFormationSpace_;
    /// <summary>
    ///* 士兵在战斗时在碰撞之外的距离（eg，如果是1，则士兵会尽量保持在碰撞的1米之外的位置作为战斗位置） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BattleFormationSpace {
      get { return battleFormationSpace_; }
      set {
        battleFormationSpace_ = value;
      }
    }

    /// <summary>Field number for the "range_wander" field.</summary>
    public const int RangeWanderFieldNumber = 28;
    private float rangeWander_;
    /// <summary>
    ///* 远程攻击状态时未参与攻击的士兵随机走动范围 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeWander {
      get { return rangeWander_; }
      set {
        rangeWander_ = value;
      }
    }

    /// <summary>Field number for the "charge_impact_ignore" field.</summary>
    public const int ChargeImpactIgnoreFieldNumber = 29;
    private bool chargeImpactIgnore_;
    /// <summary>
    ///* 阻挡对方冲锋穿透 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChargeImpactIgnore {
      get { return chargeImpactIgnore_; }
      set {
        chargeImpactIgnore_ = value;
      }
    }

    /// <summary>Field number for the "ai" field.</summary>
    public const int AiFieldNumber = 30;
    private uint ai_;
    /// <summary>
    ///* AI编号 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ai {
      get { return ai_; }
      set {
        ai_ = value;
      }
    }

    /// <summary>Field number for the "formation_fixed" field.</summary>
    public const int FormationFixedFieldNumber = 31;
    private bool formationFixed_;
    /// <summary>
    ///* 阵型不乱 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FormationFixed {
      get { return formationFixed_; }
      set {
        formationFixed_ = value;
      }
    }

    /// <summary>Field number for the "savlo_time_range" field.</summary>
    public const int SavloTimeRangeFieldNumber = 32;
    private float savloTimeRange_;
    /// <summary>
    ///* 子弹齐射时间[秒] 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SavloTimeRange {
      get { return savloTimeRange_; }
      set {
        savloTimeRange_ = value;
      }
    }

    /// <summary>Field number for the "healer" field.</summary>
    public const int HealerFieldNumber = 33;
    private bool healer_;
    /// <summary>
    ///* 是否为治疗 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Healer {
      get { return healer_; }
      set {
        healer_ = value;
      }
    }

    /// <summary>Field number for the "charge_in_line" field.</summary>
    public const int ChargeInLineFieldNumber = 34;
    private bool chargeInLine_;
    /// <summary>
    ///* 一字阵 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChargeInLine {
      get { return chargeInLine_; }
      set {
        chargeInLine_ = value;
      }
    }

    /// <summary>Field number for the "sneak" field.</summary>
    public const int SneakFieldNumber = 35;
    private bool sneak_;
    /// <summary>
    ///* 是否会潜行 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Sneak {
      get { return sneak_; }
      set {
        sneak_ = value;
      }
    }

    /// <summary>Field number for the "range_charge_bomb" field.</summary>
    public const int RangeChargeBombFieldNumber = 36;
    private static readonly pb::FieldCodec<string> _repeated_rangeChargeBomb_codec
        = pb::FieldCodec.ForString(290);
    private readonly pbc::RepeatedField<string> rangeChargeBomb_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 飞弹id|伤害范围|发射间隔|高度|最大伤害量缩放1 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RangeChargeBomb {
      get { return rangeChargeBomb_; }
    }

    /// <summary>Field number for the "charge_sound" field.</summary>
    public const int ChargeSoundFieldNumber = 37;
    private string chargeSound_ = "";
    /// <summary>
    ///* 冲锋音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChargeSound {
      get { return chargeSound_; }
      set {
        chargeSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "move_sound" field.</summary>
    public const int MoveSoundFieldNumber = 38;
    private string moveSound_ = "";
    /// <summary>
    ///* 移动音效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MoveSound {
      get { return moveSound_; }
      set {
        moveSound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "view_raice" field.</summary>
    public const int ViewRaiceFieldNumber = 39;
    private float viewRaice_;
    /// <summary>
    ///* 索敌范围增长系数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ViewRaice {
      get { return viewRaice_; }
      set {
        viewRaice_ = value;
      }
    }

    /// <summary>Field number for the "snipe_time" field.</summary>
    public const int SnipeTimeFieldNumber = 40;
    private float snipeTime_;
    /// <summary>
    ///* 远程攻击时间(投矛) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SnipeTime {
      get { return snipeTime_; }
      set {
        snipeTime_ = value;
      }
    }

    /// <summary>Field number for the "charge_jump_height" field.</summary>
    public const int ChargeJumpHeightFieldNumber = 41;
    private float chargeJumpHeight_;
    /// <summary>
    ///* 冲锋跳跃的高度（跳到目标队伍内） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeJumpHeight {
      get { return chargeJumpHeight_; }
      set {
        chargeJumpHeight_ = value;
      }
    }

    /// <summary>Field number for the "tar_armor_ignore" field.</summary>
    public const int TarArmorIgnoreFieldNumber = 42;
    private bool tarArmorIgnore_;
    /// <summary>
    ///* 攻击无视对方护甲 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TarArmorIgnore {
      get { return tarArmorIgnore_; }
      set {
        tarArmorIgnore_ = value;
      }
    }

    /// <summary>Field number for the "occupy_rate" field.</summary>
    public const int OccupyRateFieldNumber = 43;
    private int occupyRate_;
    /// <summary>
    ///* 加速占领(几倍加速) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OccupyRate {
      get { return occupyRate_; }
      set {
        occupyRate_ = value;
      }
    }

    /// <summary>Field number for the "link_hp" field.</summary>
    public const int LinkHpFieldNumber = 44;
    private bool linkHp_;
    /// <summary>
    ///* 均摊伤害 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LinkHp {
      get { return linkHp_; }
      set {
        linkHp_ = value;
      }
    }

    /// <summary>Field number for the "team_hide_passive" field.</summary>
    public const int TeamHidePassiveFieldNumber = 45;
    private static readonly pb::FieldCodec<uint> _repeated_teamHidePassive_codec
        = pb::FieldCodec.ForUInt32(362);
    private readonly pbc::RepeatedField<uint> teamHidePassive_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///* 队伍被动效果（玩家不可见） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> TeamHidePassive {
      get { return teamHidePassive_; }
    }

    /// <summary>Field number for the "is_building" field.</summary>
    public const int IsBuildingFieldNumber = 46;
    private bool isBuilding_;
    /// <summary>
    ///* 是否为建筑物
    ///0 不是 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBuilding {
      get { return isBuilding_; }
      set {
        isBuilding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamLogical_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamLogical_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Formation != other.Formation) return false;
      if (Alltitude != other.Alltitude) return false;
      if (TeamBannerHeight != other.TeamBannerHeight) return false;
      if(!formationSpace_.Equals(other.formationSpace_)) return false;
      if (AtkFly != other.AtkFly) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RandomOffset, other.RandomOffset)) return false;
      if(!restraint_.Equals(other.restraint_)) return false;
      if(!beRestraint_.Equals(other.beRestraint_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WalkSpeed, other.WalkSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeSpeed, other.ChargeSpeed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeRange, other.ChargeRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeDisPlus, other.ChargeDisPlus)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeStopDelay, other.ChargeStopDelay)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeEndRegroupTime, other.ChargeEndRegroupTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RechageRange, other.RechageRange)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeCd, other.ChargeCd)) return false;
      if(!chargeHitbackRatio_.Equals(other.chargeHitbackRatio_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeTimeRange, other.ChargeTimeRange)) return false;
      if (HitFly != other.HitFly) return false;
      if(!rangeDis_.Equals(other.rangeDis_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeatkRandom, other.RangeatkRandom)) return false;
      if (AtkObstcal != other.AtkObstcal) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AlertDis, other.AlertDis)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ViewDis, other.ViewDis)) return false;
      if (Ranger != other.Ranger) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BattleFormationSpace, other.BattleFormationSpace)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeWander, other.RangeWander)) return false;
      if (ChargeImpactIgnore != other.ChargeImpactIgnore) return false;
      if (Ai != other.Ai) return false;
      if (FormationFixed != other.FormationFixed) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SavloTimeRange, other.SavloTimeRange)) return false;
      if (Healer != other.Healer) return false;
      if (ChargeInLine != other.ChargeInLine) return false;
      if (Sneak != other.Sneak) return false;
      if(!rangeChargeBomb_.Equals(other.rangeChargeBomb_)) return false;
      if (ChargeSound != other.ChargeSound) return false;
      if (MoveSound != other.MoveSound) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ViewRaice, other.ViewRaice)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SnipeTime, other.SnipeTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeJumpHeight, other.ChargeJumpHeight)) return false;
      if (TarArmorIgnore != other.TarArmorIgnore) return false;
      if (OccupyRate != other.OccupyRate) return false;
      if (LinkHp != other.LinkHp) return false;
      if(!teamHidePassive_.Equals(other.teamHidePassive_)) return false;
      if (IsBuilding != other.IsBuilding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Formation != 0) hash ^= Formation.GetHashCode();
      if (Alltitude != 0) hash ^= Alltitude.GetHashCode();
      if (TeamBannerHeight != 0) hash ^= TeamBannerHeight.GetHashCode();
      hash ^= formationSpace_.GetHashCode();
      if (AtkFly != 0) hash ^= AtkFly.GetHashCode();
      if (RandomOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RandomOffset);
      hash ^= restraint_.GetHashCode();
      hash ^= beRestraint_.GetHashCode();
      if (WalkSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WalkSpeed);
      if (ChargeSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeSpeed);
      if (ChargeRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeRange);
      if (ChargeDisPlus != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeDisPlus);
      if (ChargeStopDelay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeStopDelay);
      if (ChargeEndRegroupTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeEndRegroupTime);
      if (RechageRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RechageRange);
      if (ChargeCd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeCd);
      hash ^= chargeHitbackRatio_.GetHashCode();
      if (ChargeTimeRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeTimeRange);
      if (HitFly != false) hash ^= HitFly.GetHashCode();
      hash ^= rangeDis_.GetHashCode();
      if (RangeatkRandom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeatkRandom);
      if (AtkObstcal != 0) hash ^= AtkObstcal.GetHashCode();
      if (AlertDis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AlertDis);
      if (ViewDis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ViewDis);
      if (Ranger != false) hash ^= Ranger.GetHashCode();
      if (BattleFormationSpace != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BattleFormationSpace);
      if (RangeWander != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeWander);
      if (ChargeImpactIgnore != false) hash ^= ChargeImpactIgnore.GetHashCode();
      if (Ai != 0) hash ^= Ai.GetHashCode();
      if (FormationFixed != false) hash ^= FormationFixed.GetHashCode();
      if (SavloTimeRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SavloTimeRange);
      if (Healer != false) hash ^= Healer.GetHashCode();
      if (ChargeInLine != false) hash ^= ChargeInLine.GetHashCode();
      if (Sneak != false) hash ^= Sneak.GetHashCode();
      hash ^= rangeChargeBomb_.GetHashCode();
      if (ChargeSound.Length != 0) hash ^= ChargeSound.GetHashCode();
      if (MoveSound.Length != 0) hash ^= MoveSound.GetHashCode();
      if (ViewRaice != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ViewRaice);
      if (SnipeTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SnipeTime);
      if (ChargeJumpHeight != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeJumpHeight);
      if (TarArmorIgnore != false) hash ^= TarArmorIgnore.GetHashCode();
      if (OccupyRate != 0) hash ^= OccupyRate.GetHashCode();
      if (LinkHp != false) hash ^= LinkHp.GetHashCode();
      hash ^= teamHidePassive_.GetHashCode();
      if (IsBuilding != false) hash ^= IsBuilding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Formation != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Formation);
      }
      if (Alltitude != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Alltitude);
      }
      if (TeamBannerHeight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TeamBannerHeight);
      }
      formationSpace_.WriteTo(output, _repeated_formationSpace_codec);
      if (AtkFly != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(AtkFly);
      }
      if (RandomOffset != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RandomOffset);
      }
      restraint_.WriteTo(output, _repeated_restraint_codec);
      beRestraint_.WriteTo(output, _repeated_beRestraint_codec);
      if (WalkSpeed != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(WalkSpeed);
      }
      if (ChargeSpeed != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(ChargeSpeed);
      }
      if (ChargeRange != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(ChargeRange);
      }
      if (ChargeDisPlus != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(ChargeDisPlus);
      }
      if (ChargeStopDelay != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(ChargeStopDelay);
      }
      if (ChargeEndRegroupTime != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(ChargeEndRegroupTime);
      }
      if (RechageRange != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(RechageRange);
      }
      if (ChargeCd != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(ChargeCd);
      }
      chargeHitbackRatio_.WriteTo(output, _repeated_chargeHitbackRatio_codec);
      if (ChargeTimeRange != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(ChargeTimeRange);
      }
      if (HitFly != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(HitFly);
      }
      rangeDis_.WriteTo(output, _repeated_rangeDis_codec);
      if (RangeatkRandom != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(RangeatkRandom);
      }
      if (AtkObstcal != 0) {
        output.WriteRawTag(184, 1);
        output.WriteUInt32(AtkObstcal);
      }
      if (AlertDis != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(AlertDis);
      }
      if (ViewDis != 0F) {
        output.WriteRawTag(205, 1);
        output.WriteFloat(ViewDis);
      }
      if (Ranger != false) {
        output.WriteRawTag(208, 1);
        output.WriteBool(Ranger);
      }
      if (BattleFormationSpace != 0F) {
        output.WriteRawTag(221, 1);
        output.WriteFloat(BattleFormationSpace);
      }
      if (RangeWander != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(RangeWander);
      }
      if (ChargeImpactIgnore != false) {
        output.WriteRawTag(232, 1);
        output.WriteBool(ChargeImpactIgnore);
      }
      if (Ai != 0) {
        output.WriteRawTag(240, 1);
        output.WriteUInt32(Ai);
      }
      if (FormationFixed != false) {
        output.WriteRawTag(248, 1);
        output.WriteBool(FormationFixed);
      }
      if (SavloTimeRange != 0F) {
        output.WriteRawTag(133, 2);
        output.WriteFloat(SavloTimeRange);
      }
      if (Healer != false) {
        output.WriteRawTag(136, 2);
        output.WriteBool(Healer);
      }
      if (ChargeInLine != false) {
        output.WriteRawTag(144, 2);
        output.WriteBool(ChargeInLine);
      }
      if (Sneak != false) {
        output.WriteRawTag(152, 2);
        output.WriteBool(Sneak);
      }
      rangeChargeBomb_.WriteTo(output, _repeated_rangeChargeBomb_codec);
      if (ChargeSound.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(ChargeSound);
      }
      if (MoveSound.Length != 0) {
        output.WriteRawTag(178, 2);
        output.WriteString(MoveSound);
      }
      if (ViewRaice != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(ViewRaice);
      }
      if (SnipeTime != 0F) {
        output.WriteRawTag(197, 2);
        output.WriteFloat(SnipeTime);
      }
      if (ChargeJumpHeight != 0F) {
        output.WriteRawTag(205, 2);
        output.WriteFloat(ChargeJumpHeight);
      }
      if (TarArmorIgnore != false) {
        output.WriteRawTag(208, 2);
        output.WriteBool(TarArmorIgnore);
      }
      if (OccupyRate != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(OccupyRate);
      }
      if (LinkHp != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(LinkHp);
      }
      teamHidePassive_.WriteTo(output, _repeated_teamHidePassive_codec);
      if (IsBuilding != false) {
        output.WriteRawTag(240, 2);
        output.WriteBool(IsBuilding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Formation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Formation);
      }
      if (Alltitude != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Alltitude);
      }
      if (TeamBannerHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TeamBannerHeight);
      }
      size += formationSpace_.CalculateSize(_repeated_formationSpace_codec);
      if (AtkFly != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtkFly);
      }
      if (RandomOffset != 0F) {
        size += 1 + 4;
      }
      size += restraint_.CalculateSize(_repeated_restraint_codec);
      size += beRestraint_.CalculateSize(_repeated_beRestraint_codec);
      if (WalkSpeed != 0F) {
        size += 1 + 4;
      }
      if (ChargeSpeed != 0F) {
        size += 1 + 4;
      }
      if (ChargeRange != 0F) {
        size += 1 + 4;
      }
      if (ChargeDisPlus != 0F) {
        size += 1 + 4;
      }
      if (ChargeStopDelay != 0F) {
        size += 1 + 4;
      }
      if (ChargeEndRegroupTime != 0F) {
        size += 1 + 4;
      }
      if (RechageRange != 0F) {
        size += 2 + 4;
      }
      if (ChargeCd != 0F) {
        size += 2 + 4;
      }
      size += chargeHitbackRatio_.CalculateSize(_repeated_chargeHitbackRatio_codec);
      if (ChargeTimeRange != 0F) {
        size += 2 + 4;
      }
      if (HitFly != false) {
        size += 2 + 1;
      }
      size += rangeDis_.CalculateSize(_repeated_rangeDis_codec);
      if (RangeatkRandom != 0F) {
        size += 2 + 4;
      }
      if (AtkObstcal != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(AtkObstcal);
      }
      if (AlertDis != 0F) {
        size += 2 + 4;
      }
      if (ViewDis != 0F) {
        size += 2 + 4;
      }
      if (Ranger != false) {
        size += 2 + 1;
      }
      if (BattleFormationSpace != 0F) {
        size += 2 + 4;
      }
      if (RangeWander != 0F) {
        size += 2 + 4;
      }
      if (ChargeImpactIgnore != false) {
        size += 2 + 1;
      }
      if (Ai != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Ai);
      }
      if (FormationFixed != false) {
        size += 2 + 1;
      }
      if (SavloTimeRange != 0F) {
        size += 2 + 4;
      }
      if (Healer != false) {
        size += 2 + 1;
      }
      if (ChargeInLine != false) {
        size += 2 + 1;
      }
      if (Sneak != false) {
        size += 2 + 1;
      }
      size += rangeChargeBomb_.CalculateSize(_repeated_rangeChargeBomb_codec);
      if (ChargeSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChargeSound);
      }
      if (MoveSound.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(MoveSound);
      }
      if (ViewRaice != 0F) {
        size += 2 + 4;
      }
      if (SnipeTime != 0F) {
        size += 2 + 4;
      }
      if (ChargeJumpHeight != 0F) {
        size += 2 + 4;
      }
      if (TarArmorIgnore != false) {
        size += 2 + 1;
      }
      if (OccupyRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OccupyRate);
      }
      if (LinkHp != false) {
        size += 2 + 1;
      }
      size += teamHidePassive_.CalculateSize(_repeated_teamHidePassive_codec);
      if (IsBuilding != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamLogical_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Formation != 0) {
        Formation = other.Formation;
      }
      if (other.Alltitude != 0) {
        Alltitude = other.Alltitude;
      }
      if (other.TeamBannerHeight != 0) {
        TeamBannerHeight = other.TeamBannerHeight;
      }
      formationSpace_.Add(other.formationSpace_);
      if (other.AtkFly != 0) {
        AtkFly = other.AtkFly;
      }
      if (other.RandomOffset != 0F) {
        RandomOffset = other.RandomOffset;
      }
      restraint_.Add(other.restraint_);
      beRestraint_.Add(other.beRestraint_);
      if (other.WalkSpeed != 0F) {
        WalkSpeed = other.WalkSpeed;
      }
      if (other.ChargeSpeed != 0F) {
        ChargeSpeed = other.ChargeSpeed;
      }
      if (other.ChargeRange != 0F) {
        ChargeRange = other.ChargeRange;
      }
      if (other.ChargeDisPlus != 0F) {
        ChargeDisPlus = other.ChargeDisPlus;
      }
      if (other.ChargeStopDelay != 0F) {
        ChargeStopDelay = other.ChargeStopDelay;
      }
      if (other.ChargeEndRegroupTime != 0F) {
        ChargeEndRegroupTime = other.ChargeEndRegroupTime;
      }
      if (other.RechageRange != 0F) {
        RechageRange = other.RechageRange;
      }
      if (other.ChargeCd != 0F) {
        ChargeCd = other.ChargeCd;
      }
      chargeHitbackRatio_.Add(other.chargeHitbackRatio_);
      if (other.ChargeTimeRange != 0F) {
        ChargeTimeRange = other.ChargeTimeRange;
      }
      if (other.HitFly != false) {
        HitFly = other.HitFly;
      }
      rangeDis_.Add(other.rangeDis_);
      if (other.RangeatkRandom != 0F) {
        RangeatkRandom = other.RangeatkRandom;
      }
      if (other.AtkObstcal != 0) {
        AtkObstcal = other.AtkObstcal;
      }
      if (other.AlertDis != 0F) {
        AlertDis = other.AlertDis;
      }
      if (other.ViewDis != 0F) {
        ViewDis = other.ViewDis;
      }
      if (other.Ranger != false) {
        Ranger = other.Ranger;
      }
      if (other.BattleFormationSpace != 0F) {
        BattleFormationSpace = other.BattleFormationSpace;
      }
      if (other.RangeWander != 0F) {
        RangeWander = other.RangeWander;
      }
      if (other.ChargeImpactIgnore != false) {
        ChargeImpactIgnore = other.ChargeImpactIgnore;
      }
      if (other.Ai != 0) {
        Ai = other.Ai;
      }
      if (other.FormationFixed != false) {
        FormationFixed = other.FormationFixed;
      }
      if (other.SavloTimeRange != 0F) {
        SavloTimeRange = other.SavloTimeRange;
      }
      if (other.Healer != false) {
        Healer = other.Healer;
      }
      if (other.ChargeInLine != false) {
        ChargeInLine = other.ChargeInLine;
      }
      if (other.Sneak != false) {
        Sneak = other.Sneak;
      }
      rangeChargeBomb_.Add(other.rangeChargeBomb_);
      if (other.ChargeSound.Length != 0) {
        ChargeSound = other.ChargeSound;
      }
      if (other.MoveSound.Length != 0) {
        MoveSound = other.MoveSound;
      }
      if (other.ViewRaice != 0F) {
        ViewRaice = other.ViewRaice;
      }
      if (other.SnipeTime != 0F) {
        SnipeTime = other.SnipeTime;
      }
      if (other.ChargeJumpHeight != 0F) {
        ChargeJumpHeight = other.ChargeJumpHeight;
      }
      if (other.TarArmorIgnore != false) {
        TarArmorIgnore = other.TarArmorIgnore;
      }
      if (other.OccupyRate != 0) {
        OccupyRate = other.OccupyRate;
      }
      if (other.LinkHp != false) {
        LinkHp = other.LinkHp;
      }
      teamHidePassive_.Add(other.teamHidePassive_);
      if (other.IsBuilding != false) {
        IsBuilding = other.IsBuilding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Formation = input.ReadUInt32();
            break;
          }
          case 24: {
            Alltitude = input.ReadInt32();
            break;
          }
          case 32: {
            TeamBannerHeight = input.ReadInt32();
            break;
          }
          case 42:
          case 45: {
            formationSpace_.AddEntriesFrom(input, _repeated_formationSpace_codec);
            break;
          }
          case 48: {
            AtkFly = input.ReadUInt32();
            break;
          }
          case 61: {
            RandomOffset = input.ReadFloat();
            break;
          }
          case 66:
          case 64: {
            restraint_.AddEntriesFrom(input, _repeated_restraint_codec);
            break;
          }
          case 74:
          case 72: {
            beRestraint_.AddEntriesFrom(input, _repeated_beRestraint_codec);
            break;
          }
          case 85: {
            WalkSpeed = input.ReadFloat();
            break;
          }
          case 93: {
            ChargeSpeed = input.ReadFloat();
            break;
          }
          case 101: {
            ChargeRange = input.ReadFloat();
            break;
          }
          case 109: {
            ChargeDisPlus = input.ReadFloat();
            break;
          }
          case 117: {
            ChargeStopDelay = input.ReadFloat();
            break;
          }
          case 125: {
            ChargeEndRegroupTime = input.ReadFloat();
            break;
          }
          case 133: {
            RechageRange = input.ReadFloat();
            break;
          }
          case 141: {
            ChargeCd = input.ReadFloat();
            break;
          }
          case 146:
          case 149: {
            chargeHitbackRatio_.AddEntriesFrom(input, _repeated_chargeHitbackRatio_codec);
            break;
          }
          case 157: {
            ChargeTimeRange = input.ReadFloat();
            break;
          }
          case 160: {
            HitFly = input.ReadBool();
            break;
          }
          case 170:
          case 173: {
            rangeDis_.AddEntriesFrom(input, _repeated_rangeDis_codec);
            break;
          }
          case 181: {
            RangeatkRandom = input.ReadFloat();
            break;
          }
          case 184: {
            AtkObstcal = input.ReadUInt32();
            break;
          }
          case 197: {
            AlertDis = input.ReadFloat();
            break;
          }
          case 205: {
            ViewDis = input.ReadFloat();
            break;
          }
          case 208: {
            Ranger = input.ReadBool();
            break;
          }
          case 221: {
            BattleFormationSpace = input.ReadFloat();
            break;
          }
          case 229: {
            RangeWander = input.ReadFloat();
            break;
          }
          case 232: {
            ChargeImpactIgnore = input.ReadBool();
            break;
          }
          case 240: {
            Ai = input.ReadUInt32();
            break;
          }
          case 248: {
            FormationFixed = input.ReadBool();
            break;
          }
          case 261: {
            SavloTimeRange = input.ReadFloat();
            break;
          }
          case 264: {
            Healer = input.ReadBool();
            break;
          }
          case 272: {
            ChargeInLine = input.ReadBool();
            break;
          }
          case 280: {
            Sneak = input.ReadBool();
            break;
          }
          case 290: {
            rangeChargeBomb_.AddEntriesFrom(input, _repeated_rangeChargeBomb_codec);
            break;
          }
          case 298: {
            ChargeSound = input.ReadString();
            break;
          }
          case 306: {
            MoveSound = input.ReadString();
            break;
          }
          case 317: {
            ViewRaice = input.ReadFloat();
            break;
          }
          case 325: {
            SnipeTime = input.ReadFloat();
            break;
          }
          case 333: {
            ChargeJumpHeight = input.ReadFloat();
            break;
          }
          case 336: {
            TarArmorIgnore = input.ReadBool();
            break;
          }
          case 344: {
            OccupyRate = input.ReadInt32();
            break;
          }
          case 352: {
            LinkHp = input.ReadBool();
            break;
          }
          case 362:
          case 360: {
            teamHidePassive_.AddEntriesFrom(input, _repeated_teamHidePassive_codec);
            break;
          }
          case 368: {
            IsBuilding = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Classify_Calc_Rate_Config : pb::IMessage<Classify_Calc_Rate_Config> {
    private static readonly pb::MessageParser<Classify_Calc_Rate_Config> _parser = new pb::MessageParser<Classify_Calc_Rate_Config>(() => new Classify_Calc_Rate_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Classify_Calc_Rate_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.TeamLogicalConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Classify_Calc_Rate_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Classify_Calc_Rate_Config(Classify_Calc_Rate_Config other) : this() {
      id_ = other.id_;
      atkClassify_ = other.atkClassify_;
      atkValue_ = other.atkValue_;
      defClassify_ = other.defClassify_;
      defValue_ = other.defValue_;
      classifyDes_ = other.classifyDes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Classify_Calc_Rate_Config Clone() {
      return new Classify_Calc_Rate_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "atk_classify" field.</summary>
    public const int AtkClassifyFieldNumber = 2;
    private uint atkClassify_;
    /// <summary>
    ///* 目标classify 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AtkClassify {
      get { return atkClassify_; }
      set {
        atkClassify_ = value;
      }
    }

    /// <summary>Field number for the "atk_value" field.</summary>
    public const int AtkValueFieldNumber = 3;
    private float atkValue_;
    /// <summary>
    ///* 攻击加成 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AtkValue {
      get { return atkValue_; }
      set {
        atkValue_ = value;
      }
    }

    /// <summary>Field number for the "def_classify" field.</summary>
    public const int DefClassifyFieldNumber = 4;
    private uint defClassify_;
    /// <summary>
    ///* 目标classify 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DefClassify {
      get { return defClassify_; }
      set {
        defClassify_ = value;
      }
    }

    /// <summary>Field number for the "def_value" field.</summary>
    public const int DefValueFieldNumber = 5;
    private float defValue_;
    /// <summary>
    ///* 防御减免 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DefValue {
      get { return defValue_; }
      set {
        defValue_ = value;
      }
    }

    /// <summary>Field number for the "classify_des" field.</summary>
    public const int ClassifyDesFieldNumber = 6;
    private string classifyDes_ = "";
    /// <summary>
    ///* 兵种说明 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClassifyDes {
      get { return classifyDes_; }
      set {
        classifyDes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Classify_Calc_Rate_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Classify_Calc_Rate_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AtkClassify != other.AtkClassify) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AtkValue, other.AtkValue)) return false;
      if (DefClassify != other.DefClassify) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DefValue, other.DefValue)) return false;
      if (ClassifyDes != other.ClassifyDes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (AtkClassify != 0) hash ^= AtkClassify.GetHashCode();
      if (AtkValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AtkValue);
      if (DefClassify != 0) hash ^= DefClassify.GetHashCode();
      if (DefValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DefValue);
      if (ClassifyDes.Length != 0) hash ^= ClassifyDes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (AtkClassify != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(AtkClassify);
      }
      if (AtkValue != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AtkValue);
      }
      if (DefClassify != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(DefClassify);
      }
      if (DefValue != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DefValue);
      }
      if (ClassifyDes.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ClassifyDes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (AtkClassify != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AtkClassify);
      }
      if (AtkValue != 0F) {
        size += 1 + 4;
      }
      if (DefClassify != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DefClassify);
      }
      if (DefValue != 0F) {
        size += 1 + 4;
      }
      if (ClassifyDes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClassifyDes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Classify_Calc_Rate_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.AtkClassify != 0) {
        AtkClassify = other.AtkClassify;
      }
      if (other.AtkValue != 0F) {
        AtkValue = other.AtkValue;
      }
      if (other.DefClassify != 0) {
        DefClassify = other.DefClassify;
      }
      if (other.DefValue != 0F) {
        DefValue = other.DefValue;
      }
      if (other.ClassifyDes.Length != 0) {
        ClassifyDes = other.ClassifyDes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            AtkClassify = input.ReadUInt32();
            break;
          }
          case 29: {
            AtkValue = input.ReadFloat();
            break;
          }
          case 32: {
            DefClassify = input.ReadUInt32();
            break;
          }
          case 45: {
            DefValue = input.ReadFloat();
            break;
          }
          case 50: {
            ClassifyDes = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Team_Formation_Config : pb::IMessage<Team_Formation_Config> {
    private static readonly pb::MessageParser<Team_Formation_Config> _parser = new pb::MessageParser<Team_Formation_Config>(() => new Team_Formation_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Team_Formation_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.TeamLogicalConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team_Formation_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team_Formation_Config(Team_Formation_Config other) : this() {
      id_ = other.id_;
      formation_ = other.formation_;
      mapFormation_ = other.mapFormation_;
      heroOffset_ = other.heroOffset_;
      depolyTeamOffset_ = other.depolyTeamOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team_Formation_Config Clone() {
      return new Team_Formation_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 阵型id 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "formation" field.</summary>
    public const int FormationFieldNumber = 2;
    private string formation_ = "";
    /// <summary>
    ///* 阵型样式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Formation {
      get { return formation_; }
      set {
        formation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "map_formation" field.</summary>
    public const int MapFormationFieldNumber = 3;
    private string mapFormation_ = "";
    /// <summary>
    ///* 地图阵型 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapFormation {
      get { return mapFormation_; }
      set {
        mapFormation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hero_offset" field.</summary>
    public const int HeroOffsetFieldNumber = 4;
    private float heroOffset_;
    /// <summary>
    ///* 英雄向前站位距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeroOffset {
      get { return heroOffset_; }
      set {
        heroOffset_ = value;
      }
    }

    /// <summary>Field number for the "depoly_team_offset" field.</summary>
    public const int DepolyTeamOffsetFieldNumber = 5;
    private float depolyTeamOffset_;
    /// <summary>
    ///* 布阵的时候的队伍偏移量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DepolyTeamOffset {
      get { return depolyTeamOffset_; }
      set {
        depolyTeamOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Team_Formation_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Team_Formation_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Formation != other.Formation) return false;
      if (MapFormation != other.MapFormation) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeroOffset, other.HeroOffset)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DepolyTeamOffset, other.DepolyTeamOffset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Formation.Length != 0) hash ^= Formation.GetHashCode();
      if (MapFormation.Length != 0) hash ^= MapFormation.GetHashCode();
      if (HeroOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeroOffset);
      if (DepolyTeamOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DepolyTeamOffset);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Formation.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Formation);
      }
      if (MapFormation.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MapFormation);
      }
      if (HeroOffset != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(HeroOffset);
      }
      if (DepolyTeamOffset != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DepolyTeamOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Formation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Formation);
      }
      if (MapFormation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapFormation);
      }
      if (HeroOffset != 0F) {
        size += 1 + 4;
      }
      if (DepolyTeamOffset != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Team_Formation_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Formation.Length != 0) {
        Formation = other.Formation;
      }
      if (other.MapFormation.Length != 0) {
        MapFormation = other.MapFormation;
      }
      if (other.HeroOffset != 0F) {
        HeroOffset = other.HeroOffset;
      }
      if (other.DepolyTeamOffset != 0F) {
        DepolyTeamOffset = other.DepolyTeamOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Formation = input.ReadString();
            break;
          }
          case 26: {
            MapFormation = input.ReadString();
            break;
          }
          case 37: {
            HeroOffset = input.ReadFloat();
            break;
          }
          case 45: {
            DepolyTeamOffset = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamLogical_Config_Data : pb::IMessage<TeamLogical_Config_Data> {
    private static readonly pb::MessageParser<TeamLogical_Config_Data> _parser = new pb::MessageParser<TeamLogical_Config_Data>(() => new TeamLogical_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamLogical_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.TeamLogicalConfigReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamLogical_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamLogical_Config_Data(TeamLogical_Config_Data other) : this() {
      teamLogicalConfigItems_ = other.teamLogicalConfigItems_.Clone();
      classifyCalcRateConfigItems_ = other.classifyCalcRateConfigItems_.Clone();
      teamFormationConfigItems_ = other.teamFormationConfigItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamLogical_Config_Data Clone() {
      return new TeamLogical_Config_Data(this);
    }

    /// <summary>Field number for the "TeamLogical_Config_items" field.</summary>
    public const int TeamLogicalConfigItemsFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::ConfigData.TeamLogical_Config>.Codec _map_teamLogicalConfigItems_codec
        = new pbc::MapField<uint, global::ConfigData.TeamLogical_Config>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::ConfigData.TeamLogical_Config.Parser), 10);
    private readonly pbc::MapField<uint, global::ConfigData.TeamLogical_Config> teamLogicalConfigItems_ = new pbc::MapField<uint, global::ConfigData.TeamLogical_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::ConfigData.TeamLogical_Config> TeamLogicalConfigItems {
      get { return teamLogicalConfigItems_; }
    }

    /// <summary>Field number for the "Classify_Calc_Rate_Config_items" field.</summary>
    public const int ClassifyCalcRateConfigItemsFieldNumber = 2;
    private static readonly pbc::MapField<uint, global::ConfigData.Classify_Calc_Rate_Config>.Codec _map_classifyCalcRateConfigItems_codec
        = new pbc::MapField<uint, global::ConfigData.Classify_Calc_Rate_Config>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::ConfigData.Classify_Calc_Rate_Config.Parser), 18);
    private readonly pbc::MapField<uint, global::ConfigData.Classify_Calc_Rate_Config> classifyCalcRateConfigItems_ = new pbc::MapField<uint, global::ConfigData.Classify_Calc_Rate_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::ConfigData.Classify_Calc_Rate_Config> ClassifyCalcRateConfigItems {
      get { return classifyCalcRateConfigItems_; }
    }

    /// <summary>Field number for the "Team_Formation_Config_items" field.</summary>
    public const int TeamFormationConfigItemsFieldNumber = 3;
    private static readonly pbc::MapField<uint, global::ConfigData.Team_Formation_Config>.Codec _map_teamFormationConfigItems_codec
        = new pbc::MapField<uint, global::ConfigData.Team_Formation_Config>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::ConfigData.Team_Formation_Config.Parser), 26);
    private readonly pbc::MapField<uint, global::ConfigData.Team_Formation_Config> teamFormationConfigItems_ = new pbc::MapField<uint, global::ConfigData.Team_Formation_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::ConfigData.Team_Formation_Config> TeamFormationConfigItems {
      get { return teamFormationConfigItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamLogical_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamLogical_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!TeamLogicalConfigItems.Equals(other.TeamLogicalConfigItems)) return false;
      if (!ClassifyCalcRateConfigItems.Equals(other.ClassifyCalcRateConfigItems)) return false;
      if (!TeamFormationConfigItems.Equals(other.TeamFormationConfigItems)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= TeamLogicalConfigItems.GetHashCode();
      hash ^= ClassifyCalcRateConfigItems.GetHashCode();
      hash ^= TeamFormationConfigItems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teamLogicalConfigItems_.WriteTo(output, _map_teamLogicalConfigItems_codec);
      classifyCalcRateConfigItems_.WriteTo(output, _map_classifyCalcRateConfigItems_codec);
      teamFormationConfigItems_.WriteTo(output, _map_teamFormationConfigItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teamLogicalConfigItems_.CalculateSize(_map_teamLogicalConfigItems_codec);
      size += classifyCalcRateConfigItems_.CalculateSize(_map_classifyCalcRateConfigItems_codec);
      size += teamFormationConfigItems_.CalculateSize(_map_teamFormationConfigItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamLogical_Config_Data other) {
      if (other == null) {
        return;
      }
      teamLogicalConfigItems_.Add(other.teamLogicalConfigItems_);
      classifyCalcRateConfigItems_.Add(other.classifyCalcRateConfigItems_);
      teamFormationConfigItems_.Add(other.teamFormationConfigItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            teamLogicalConfigItems_.AddEntriesFrom(input, _map_teamLogicalConfigItems_codec);
            break;
          }
          case 18: {
            classifyCalcRateConfigItems_.AddEntriesFrom(input, _map_classifyCalcRateConfigItems_codec);
            break;
          }
          case 26: {
            teamFormationConfigItems_.AddEntriesFrom(input, _map_teamFormationConfigItems_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
