// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NpcData_Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ConfigData {

  /// <summary>Holder for reflection information generated from NpcData_Config.proto</summary>
  public static partial class NpcDataConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for NpcData_Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NpcDataConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChROcGNEYXRhX0NvbmZpZy5wcm90bxIKQ29uZmlnRGF0YSLPAgoOTnBjRGF0",
            "YV9Db25maWcSCgoCaWQYASABKA0SDQoFc2NlbmUYAiABKA0SDgoGaGVyb2lk",
            "GAMgASgNEgwKBHNpZGUYBCABKA0SCgoCbHYYBSABKAUSDAoEcmFuaxgGIAEo",
            "BRIOCgZoZXJvaHAYByABKAISDwoHaGVyb2F0axgIIAEoAhIQCghoZXJvcmF0",
            "axgJIAEoAhIPCgdoZXJvZGVmGAogASgCEg8KB2hlcm9hY2QYCyABKAISDwoH",
            "aGVyb2NydBgMIAEoAhIOCgZwYXduaHAYDSABKAISDwoHcGF3bmF0axgOIAEo",
            "AhIQCghwYXducmF0axgPIAEoAhIPCgdwYXduZGVmGBAgASgCEg8KB3Bhd25h",
            "Y2QYESABKAISDwoHcGF3bmNydBgSIAEoAhIRCglwYXduY291bnQYEyABKAUS",
            "CwoDbnVtGBQgASgFIsMBChNOcGNEYXRhX0NvbmZpZ19EYXRhElUKFE5wY0Rh",
            "dGFfQ29uZmlnX2l0ZW1zGAEgAygLMjcuQ29uZmlnRGF0YS5OcGNEYXRhX0Nv",
            "bmZpZ19EYXRhLk5wY0RhdGFDb25maWdJdGVtc0VudHJ5GlUKF05wY0RhdGFD",
            "b25maWdJdGVtc0VudHJ5EgsKA2tleRgBIAEoDRIpCgV2YWx1ZRgCIAEoCzIa",
            "LkNvbmZpZ0RhdGEuTnBjRGF0YV9Db25maWc6AjgBQiMKIWNvbS50cmluaXRp",
            "Z2FtZXMuc2VydmVyLmNvbmYuYXV0b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.NpcData_Config), global::ConfigData.NpcData_Config.Parser, new[]{ "Id", "Scene", "Heroid", "Side", "Lv", "Rank", "Herohp", "Heroatk", "Heroratk", "Herodef", "Heroacd", "Herocrt", "Pawnhp", "Pawnatk", "Pawnratk", "Pawndef", "Pawnacd", "Pawncrt", "Pawncount", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.NpcData_Config_Data), global::ConfigData.NpcData_Config_Data.Parser, new[]{ "NpcDataConfigItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NpcData_Config : pb::IMessage<NpcData_Config> {
    private static readonly pb::MessageParser<NpcData_Config> _parser = new pb::MessageParser<NpcData_Config>(() => new NpcData_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcData_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.NpcDataConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcData_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcData_Config(NpcData_Config other) : this() {
      id_ = other.id_;
      scene_ = other.scene_;
      heroid_ = other.heroid_;
      side_ = other.side_;
      lv_ = other.lv_;
      rank_ = other.rank_;
      herohp_ = other.herohp_;
      heroatk_ = other.heroatk_;
      heroratk_ = other.heroratk_;
      herodef_ = other.herodef_;
      heroacd_ = other.heroacd_;
      herocrt_ = other.herocrt_;
      pawnhp_ = other.pawnhp_;
      pawnatk_ = other.pawnatk_;
      pawnratk_ = other.pawnratk_;
      pawndef_ = other.pawndef_;
      pawnacd_ = other.pawnacd_;
      pawncrt_ = other.pawncrt_;
      pawncount_ = other.pawncount_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcData_Config Clone() {
      return new NpcData_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "scene" field.</summary>
    public const int SceneFieldNumber = 2;
    private uint scene_;
    /// <summary>
    ///* 场景ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Scene {
      get { return scene_; }
      set {
        scene_ = value;
      }
    }

    /// <summary>Field number for the "heroid" field.</summary>
    public const int HeroidFieldNumber = 3;
    private uint heroid_;
    /// <summary>
    ///* 英雄ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Heroid {
      get { return heroid_; }
      set {
        heroid_ = value;
      }
    }

    /// <summary>Field number for the "side" field.</summary>
    public const int SideFieldNumber = 4;
    private uint side_;
    /// <summary>
    ///* 阵营 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Side {
      get { return side_; }
      set {
        side_ = value;
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 5;
    private int lv_;
    /// <summary>
    ///* 等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 6;
    private int rank_;
    /// <summary>
    ///* 星级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "herohp" field.</summary>
    public const int HerohpFieldNumber = 7;
    private float herohp_;
    /// <summary>
    ///* 英雄血量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Herohp {
      get { return herohp_; }
      set {
        herohp_ = value;
      }
    }

    /// <summary>Field number for the "heroatk" field.</summary>
    public const int HeroatkFieldNumber = 8;
    private float heroatk_;
    /// <summary>
    ///* 英雄攻击 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Heroatk {
      get { return heroatk_; }
      set {
        heroatk_ = value;
      }
    }

    /// <summary>Field number for the "heroratk" field.</summary>
    public const int HeroratkFieldNumber = 9;
    private float heroratk_;
    /// <summary>
    ///* 英雄真伤 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Heroratk {
      get { return heroratk_; }
      set {
        heroratk_ = value;
      }
    }

    /// <summary>Field number for the "herodef" field.</summary>
    public const int HerodefFieldNumber = 10;
    private float herodef_;
    /// <summary>
    ///* 英雄防御 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Herodef {
      get { return herodef_; }
      set {
        herodef_ = value;
      }
    }

    /// <summary>Field number for the "heroacd" field.</summary>
    public const int HeroacdFieldNumber = 11;
    private float heroacd_;
    /// <summary>
    ///* 英雄闪避 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Heroacd {
      get { return heroacd_; }
      set {
        heroacd_ = value;
      }
    }

    /// <summary>Field number for the "herocrt" field.</summary>
    public const int HerocrtFieldNumber = 12;
    private float herocrt_;
    /// <summary>
    ///* 英雄暴击 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Herocrt {
      get { return herocrt_; }
      set {
        herocrt_ = value;
      }
    }

    /// <summary>Field number for the "pawnhp" field.</summary>
    public const int PawnhpFieldNumber = 13;
    private float pawnhp_;
    /// <summary>
    ///* 小兵血量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pawnhp {
      get { return pawnhp_; }
      set {
        pawnhp_ = value;
      }
    }

    /// <summary>Field number for the "pawnatk" field.</summary>
    public const int PawnatkFieldNumber = 14;
    private float pawnatk_;
    /// <summary>
    ///* 小兵攻击 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pawnatk {
      get { return pawnatk_; }
      set {
        pawnatk_ = value;
      }
    }

    /// <summary>Field number for the "pawnratk" field.</summary>
    public const int PawnratkFieldNumber = 15;
    private float pawnratk_;
    /// <summary>
    ///* 小兵真伤 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pawnratk {
      get { return pawnratk_; }
      set {
        pawnratk_ = value;
      }
    }

    /// <summary>Field number for the "pawndef" field.</summary>
    public const int PawndefFieldNumber = 16;
    private float pawndef_;
    /// <summary>
    ///* 小兵防御 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pawndef {
      get { return pawndef_; }
      set {
        pawndef_ = value;
      }
    }

    /// <summary>Field number for the "pawnacd" field.</summary>
    public const int PawnacdFieldNumber = 17;
    private float pawnacd_;
    /// <summary>
    ///* 小兵闪避 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pawnacd {
      get { return pawnacd_; }
      set {
        pawnacd_ = value;
      }
    }

    /// <summary>Field number for the "pawncrt" field.</summary>
    public const int PawncrtFieldNumber = 18;
    private float pawncrt_;
    /// <summary>
    ///* 小兵暴击 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pawncrt {
      get { return pawncrt_; }
      set {
        pawncrt_ = value;
      }
    }

    /// <summary>Field number for the "pawncount" field.</summary>
    public const int PawncountFieldNumber = 19;
    private int pawncount_;
    /// <summary>
    ///* 小兵人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pawncount {
      get { return pawncount_; }
      set {
        pawncount_ = value;
      }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 20;
    private int num_;
    /// <summary>
    ///* 英雄人数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcData_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcData_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Scene != other.Scene) return false;
      if (Heroid != other.Heroid) return false;
      if (Side != other.Side) return false;
      if (Lv != other.Lv) return false;
      if (Rank != other.Rank) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Herohp, other.Herohp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Heroatk, other.Heroatk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Heroratk, other.Heroratk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Herodef, other.Herodef)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Heroacd, other.Heroacd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Herocrt, other.Herocrt)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pawnhp, other.Pawnhp)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pawnatk, other.Pawnatk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pawnratk, other.Pawnratk)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pawndef, other.Pawndef)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pawnacd, other.Pawnacd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pawncrt, other.Pawncrt)) return false;
      if (Pawncount != other.Pawncount) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Scene != 0) hash ^= Scene.GetHashCode();
      if (Heroid != 0) hash ^= Heroid.GetHashCode();
      if (Side != 0) hash ^= Side.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (Herohp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Herohp);
      if (Heroatk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Heroatk);
      if (Heroratk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Heroratk);
      if (Herodef != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Herodef);
      if (Heroacd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Heroacd);
      if (Herocrt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Herocrt);
      if (Pawnhp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pawnhp);
      if (Pawnatk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pawnatk);
      if (Pawnratk != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pawnratk);
      if (Pawndef != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pawndef);
      if (Pawnacd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pawnacd);
      if (Pawncrt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pawncrt);
      if (Pawncount != 0) hash ^= Pawncount.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Scene != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Scene);
      }
      if (Heroid != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Heroid);
      }
      if (Side != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Side);
      }
      if (Lv != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Lv);
      }
      if (Rank != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rank);
      }
      if (Herohp != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Herohp);
      }
      if (Heroatk != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Heroatk);
      }
      if (Heroratk != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Heroratk);
      }
      if (Herodef != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Herodef);
      }
      if (Heroacd != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Heroacd);
      }
      if (Herocrt != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Herocrt);
      }
      if (Pawnhp != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(Pawnhp);
      }
      if (Pawnatk != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Pawnatk);
      }
      if (Pawnratk != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Pawnratk);
      }
      if (Pawndef != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(Pawndef);
      }
      if (Pawnacd != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(Pawnacd);
      }
      if (Pawncrt != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(Pawncrt);
      }
      if (Pawncount != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Pawncount);
      }
      if (Num != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Scene != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Scene);
      }
      if (Heroid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Heroid);
      }
      if (Side != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Side);
      }
      if (Lv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Herohp != 0F) {
        size += 1 + 4;
      }
      if (Heroatk != 0F) {
        size += 1 + 4;
      }
      if (Heroratk != 0F) {
        size += 1 + 4;
      }
      if (Herodef != 0F) {
        size += 1 + 4;
      }
      if (Heroacd != 0F) {
        size += 1 + 4;
      }
      if (Herocrt != 0F) {
        size += 1 + 4;
      }
      if (Pawnhp != 0F) {
        size += 1 + 4;
      }
      if (Pawnatk != 0F) {
        size += 1 + 4;
      }
      if (Pawnratk != 0F) {
        size += 1 + 4;
      }
      if (Pawndef != 0F) {
        size += 2 + 4;
      }
      if (Pawnacd != 0F) {
        size += 2 + 4;
      }
      if (Pawncrt != 0F) {
        size += 2 + 4;
      }
      if (Pawncount != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Pawncount);
      }
      if (Num != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcData_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Scene != 0) {
        Scene = other.Scene;
      }
      if (other.Heroid != 0) {
        Heroid = other.Heroid;
      }
      if (other.Side != 0) {
        Side = other.Side;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.Herohp != 0F) {
        Herohp = other.Herohp;
      }
      if (other.Heroatk != 0F) {
        Heroatk = other.Heroatk;
      }
      if (other.Heroratk != 0F) {
        Heroratk = other.Heroratk;
      }
      if (other.Herodef != 0F) {
        Herodef = other.Herodef;
      }
      if (other.Heroacd != 0F) {
        Heroacd = other.Heroacd;
      }
      if (other.Herocrt != 0F) {
        Herocrt = other.Herocrt;
      }
      if (other.Pawnhp != 0F) {
        Pawnhp = other.Pawnhp;
      }
      if (other.Pawnatk != 0F) {
        Pawnatk = other.Pawnatk;
      }
      if (other.Pawnratk != 0F) {
        Pawnratk = other.Pawnratk;
      }
      if (other.Pawndef != 0F) {
        Pawndef = other.Pawndef;
      }
      if (other.Pawnacd != 0F) {
        Pawnacd = other.Pawnacd;
      }
      if (other.Pawncrt != 0F) {
        Pawncrt = other.Pawncrt;
      }
      if (other.Pawncount != 0) {
        Pawncount = other.Pawncount;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Scene = input.ReadUInt32();
            break;
          }
          case 24: {
            Heroid = input.ReadUInt32();
            break;
          }
          case 32: {
            Side = input.ReadUInt32();
            break;
          }
          case 40: {
            Lv = input.ReadInt32();
            break;
          }
          case 48: {
            Rank = input.ReadInt32();
            break;
          }
          case 61: {
            Herohp = input.ReadFloat();
            break;
          }
          case 69: {
            Heroatk = input.ReadFloat();
            break;
          }
          case 77: {
            Heroratk = input.ReadFloat();
            break;
          }
          case 85: {
            Herodef = input.ReadFloat();
            break;
          }
          case 93: {
            Heroacd = input.ReadFloat();
            break;
          }
          case 101: {
            Herocrt = input.ReadFloat();
            break;
          }
          case 109: {
            Pawnhp = input.ReadFloat();
            break;
          }
          case 117: {
            Pawnatk = input.ReadFloat();
            break;
          }
          case 125: {
            Pawnratk = input.ReadFloat();
            break;
          }
          case 133: {
            Pawndef = input.ReadFloat();
            break;
          }
          case 141: {
            Pawnacd = input.ReadFloat();
            break;
          }
          case 149: {
            Pawncrt = input.ReadFloat();
            break;
          }
          case 152: {
            Pawncount = input.ReadInt32();
            break;
          }
          case 160: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcData_Config_Data : pb::IMessage<NpcData_Config_Data> {
    private static readonly pb::MessageParser<NpcData_Config_Data> _parser = new pb::MessageParser<NpcData_Config_Data>(() => new NpcData_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcData_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.NpcDataConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcData_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcData_Config_Data(NpcData_Config_Data other) : this() {
      npcDataConfigItems_ = other.npcDataConfigItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcData_Config_Data Clone() {
      return new NpcData_Config_Data(this);
    }

    /// <summary>Field number for the "NpcData_Config_items" field.</summary>
    public const int NpcDataConfigItemsFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::ConfigData.NpcData_Config>.Codec _map_npcDataConfigItems_codec
        = new pbc::MapField<uint, global::ConfigData.NpcData_Config>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::ConfigData.NpcData_Config.Parser), 10);
    private readonly pbc::MapField<uint, global::ConfigData.NpcData_Config> npcDataConfigItems_ = new pbc::MapField<uint, global::ConfigData.NpcData_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::ConfigData.NpcData_Config> NpcDataConfigItems {
      get { return npcDataConfigItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcData_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcData_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!NpcDataConfigItems.Equals(other.NpcDataConfigItems)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= NpcDataConfigItems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      npcDataConfigItems_.WriteTo(output, _map_npcDataConfigItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += npcDataConfigItems_.CalculateSize(_map_npcDataConfigItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcData_Config_Data other) {
      if (other == null) {
        return;
      }
      npcDataConfigItems_.Add(other.npcDataConfigItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            npcDataConfigItems_.AddEntriesFrom(input, _map_npcDataConfigItems_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
