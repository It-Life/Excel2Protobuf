// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GeneralAnimations_Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ConfigData {

  /// <summary>Holder for reflection information generated from GeneralAnimations_Config.proto</summary>
  public static partial class GeneralAnimationsConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for GeneralAnimations_Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GeneralAnimationsConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5HZW5lcmFsQW5pbWF0aW9uc19Db25maWcucHJvdG8SCkNvbmZpZ0RhdGEi",
            "twUKGEdlbmVyYWxBbmltYXRpb25zX0NvbmZpZxIKCgJpZBgBIAEoDRIMCgRw",
            "YXRoGAIgASgJEhAKCHJ1bl9hbmltGAMgASgJEhwKFGNvbW1vbl9zcGVsbF90",
            "cmlnZ2VyGAQgAygJEh4KFm1lbGVlX2ludGVyYWN0aW9uX2FuaW0YBSADKAkS",
            "EgoKcmFuZ2VfYW5pbRgGIAMoCRIZChFtb3ZpbmdfcmFuZ2VfYW5pbRgHIAMo",
            "CRIbChNmcmlzdF9hbmltX3ByaW9yaXR5GAggASgCEhsKE21lbGVlX3dhdmlu",
            "Z19lZmZlY3QYCSADKAkSIwobbWVsZWVfaW50ZXJhY3Rpb25faHVydF9hbmlt",
            "GAogAygJEhYKDm1vdmVfcmFuZ2VodXJ0GAsgASgJEhMKC2NoYXJnZV9hbmlt",
            "GAwgASgJEhEKCXdhbGtfYW5pbRgNIAEoCRIRCglpZGxlX2FuaW0YDiABKAkS",
            "FwoPbm9ybWFsZGVhZF9hbmltGA8gASgJEhUKDWlkbGVwZXJmX2FuaW0YECAD",
            "KAkSFAoMZmx5ZGVhZF9hbmltGBEgAygJEhYKDmZseWRlYWRfZWZmZWN0GBIg",
            "ASgJEhoKEmNoYXJnZV9hdHRhY2tfYW5pbRgTIAEoCRIYChBjb21tb25fc3Bl",
            "bGxfcHJlGBQgASgJEhkKEWNvbW1vbl9zcGVsbF9wb3N0GBUgASgJEhgKEGV4",
            "cHJlc3Npb25fbGF1Z2gYFiABKAkSGAoQZXhwcmVzc2lvbl9hbmdlchgXIAEo",
            "CRIcChRleHByZXNzaW9uX3N1cnByaXNlZBgYIAEoCRIXCg9leHByZXNzaW9u",
            "X2ZlYXIYGSABKAkSGgoSZXhwcmVzc2lvbl9hc3NhdWx0GBogASgJEhoKEmV4",
            "cHJlc3Npb25faW5qdXJlZBgbIAEoCSL/AQodR2VuZXJhbEFuaW1hdGlvbnNf",
            "Q29uZmlnX0RhdGEScwoeR2VuZXJhbEFuaW1hdGlvbnNfQ29uZmlnX2l0ZW1z",
            "GAEgAygLMksuQ29uZmlnRGF0YS5HZW5lcmFsQW5pbWF0aW9uc19Db25maWdf",
            "RGF0YS5HZW5lcmFsQW5pbWF0aW9uc0NvbmZpZ0l0ZW1zRW50cnkaaQohR2Vu",
            "ZXJhbEFuaW1hdGlvbnNDb25maWdJdGVtc0VudHJ5EgsKA2tleRgBIAEoDRIz",
            "CgV2YWx1ZRgCIAEoCzIkLkNvbmZpZ0RhdGEuR2VuZXJhbEFuaW1hdGlvbnNf",
            "Q29uZmlnOgI4AUIjCiFjb20udHJpbml0aWdhbWVzLnNlcnZlci5jb25mLmF1",
            "dG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.GeneralAnimations_Config), global::ConfigData.GeneralAnimations_Config.Parser, new[]{ "Id", "Path", "RunAnim", "CommonSpellTrigger", "MeleeInteractionAnim", "RangeAnim", "MovingRangeAnim", "FristAnimPriority", "MeleeWavingEffect", "MeleeInteractionHurtAnim", "MoveRangehurt", "ChargeAnim", "WalkAnim", "IdleAnim", "NormaldeadAnim", "IdleperfAnim", "FlydeadAnim", "FlydeadEffect", "ChargeAttackAnim", "CommonSpellPre", "CommonSpellPost", "ExpressionLaugh", "ExpressionAnger", "ExpressionSurprised", "ExpressionFear", "ExpressionAssault", "ExpressionInjured" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.GeneralAnimations_Config_Data), global::ConfigData.GeneralAnimations_Config_Data.Parser, new[]{ "GeneralAnimationsConfigItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GeneralAnimations_Config : pb::IMessage<GeneralAnimations_Config> {
    private static readonly pb::MessageParser<GeneralAnimations_Config> _parser = new pb::MessageParser<GeneralAnimations_Config>(() => new GeneralAnimations_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeneralAnimations_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.GeneralAnimationsConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralAnimations_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralAnimations_Config(GeneralAnimations_Config other) : this() {
      id_ = other.id_;
      path_ = other.path_;
      runAnim_ = other.runAnim_;
      commonSpellTrigger_ = other.commonSpellTrigger_.Clone();
      meleeInteractionAnim_ = other.meleeInteractionAnim_.Clone();
      rangeAnim_ = other.rangeAnim_.Clone();
      movingRangeAnim_ = other.movingRangeAnim_.Clone();
      fristAnimPriority_ = other.fristAnimPriority_;
      meleeWavingEffect_ = other.meleeWavingEffect_.Clone();
      meleeInteractionHurtAnim_ = other.meleeInteractionHurtAnim_.Clone();
      moveRangehurt_ = other.moveRangehurt_;
      chargeAnim_ = other.chargeAnim_;
      walkAnim_ = other.walkAnim_;
      idleAnim_ = other.idleAnim_;
      normaldeadAnim_ = other.normaldeadAnim_;
      idleperfAnim_ = other.idleperfAnim_.Clone();
      flydeadAnim_ = other.flydeadAnim_.Clone();
      flydeadEffect_ = other.flydeadEffect_;
      chargeAttackAnim_ = other.chargeAttackAnim_;
      commonSpellPre_ = other.commonSpellPre_;
      commonSpellPost_ = other.commonSpellPost_;
      expressionLaugh_ = other.expressionLaugh_;
      expressionAnger_ = other.expressionAnger_;
      expressionSurprised_ = other.expressionSurprised_;
      expressionFear_ = other.expressionFear_;
      expressionAssault_ = other.expressionAssault_;
      expressionInjured_ = other.expressionInjured_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralAnimations_Config Clone() {
      return new GeneralAnimations_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 唯一标识 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    /// <summary>
    ///* 动画路径 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "run_anim" field.</summary>
    public const int RunAnimFieldNumber = 3;
    private string runAnim_ = "";
    /// <summary>
    ///* 跑动动画 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RunAnim {
      get { return runAnim_; }
      set {
        runAnim_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "common_spell_trigger" field.</summary>
    public const int CommonSpellTriggerFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_commonSpellTrigger_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> commonSpellTrigger_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 技能动作 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CommonSpellTrigger {
      get { return commonSpellTrigger_; }
    }

    /// <summary>Field number for the "melee_interaction_anim" field.</summary>
    public const int MeleeInteractionAnimFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_meleeInteractionAnim_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> meleeInteractionAnim_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 近战攻击动画
    ///动作-触发帧数(结算伤害) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MeleeInteractionAnim {
      get { return meleeInteractionAnim_; }
    }

    /// <summary>Field number for the "range_anim" field.</summary>
    public const int RangeAnimFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_rangeAnim_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> rangeAnim_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 远程攻击动画
    ///动作-触发帧数(触发子弹弹道) 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> RangeAnim {
      get { return rangeAnim_; }
    }

    /// <summary>Field number for the "moving_range_anim" field.</summary>
    public const int MovingRangeAnimFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_movingRangeAnim_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> movingRangeAnim_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 移动中远程攻击动画 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MovingRangeAnim {
      get { return movingRangeAnim_; }
    }

    /// <summary>Field number for the "frist_anim_priority" field.</summary>
    public const int FristAnimPriorityFieldNumber = 8;
    private float fristAnimPriority_;
    /// <summary>
    ///* 三连击第一击出现概率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FristAnimPriority {
      get { return fristAnimPriority_; }
      set {
        fristAnimPriority_ = value;
      }
    }

    /// <summary>Field number for the "melee_waving_effect" field.</summary>
    public const int MeleeWavingEffectFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_meleeWavingEffect_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> meleeWavingEffect_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 近战刀光特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MeleeWavingEffect {
      get { return meleeWavingEffect_; }
    }

    /// <summary>Field number for the "melee_interaction_hurt_anim" field.</summary>
    public const int MeleeInteractionHurtAnimFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_meleeInteractionHurtAnim_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> meleeInteractionHurtAnim_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 近战受击动画 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> MeleeInteractionHurtAnim {
      get { return meleeInteractionHurtAnim_; }
    }

    /// <summary>Field number for the "move_rangehurt" field.</summary>
    public const int MoveRangehurtFieldNumber = 11;
    private string moveRangehurt_ = "";
    /// <summary>
    ///* 移动中远程击中 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MoveRangehurt {
      get { return moveRangehurt_; }
      set {
        moveRangehurt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "charge_anim" field.</summary>
    public const int ChargeAnimFieldNumber = 12;
    private string chargeAnim_ = "";
    /// <summary>
    ///* 冲锋动画 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChargeAnim {
      get { return chargeAnim_; }
      set {
        chargeAnim_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "walk_anim" field.</summary>
    public const int WalkAnimFieldNumber = 13;
    private string walkAnim_ = "";
    /// <summary>
    ///* 步行动画 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WalkAnim {
      get { return walkAnim_; }
      set {
        walkAnim_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idle_anim" field.</summary>
    public const int IdleAnimFieldNumber = 14;
    private string idleAnim_ = "";
    /// <summary>
    ///* 待机动画 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdleAnim {
      get { return idleAnim_; }
      set {
        idleAnim_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "normaldead_anim" field.</summary>
    public const int NormaldeadAnimFieldNumber = 15;
    private string normaldeadAnim_ = "";
    /// <summary>
    ///* 正常死亡动画 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NormaldeadAnim {
      get { return normaldeadAnim_; }
      set {
        normaldeadAnim_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "idleperf_anim" field.</summary>
    public const int IdleperfAnimFieldNumber = 16;
    private static readonly pb::FieldCodec<string> _repeated_idleperfAnim_codec
        = pb::FieldCodec.ForString(130);
    private readonly pbc::RepeatedField<string> idleperfAnim_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 攻击待机表演动画 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> IdleperfAnim {
      get { return idleperfAnim_; }
    }

    /// <summary>Field number for the "flydead_anim" field.</summary>
    public const int FlydeadAnimFieldNumber = 17;
    private static readonly pb::FieldCodec<string> _repeated_flydeadAnim_codec
        = pb::FieldCodec.ForString(138);
    private readonly pbc::RepeatedField<string> flydeadAnim_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///* 击飞死亡动画 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> FlydeadAnim {
      get { return flydeadAnim_; }
    }

    /// <summary>Field number for the "flydead_effect" field.</summary>
    public const int FlydeadEffectFieldNumber = 18;
    private string flydeadEffect_ = "";
    /// <summary>
    ///* 击飞死亡特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FlydeadEffect {
      get { return flydeadEffect_; }
      set {
        flydeadEffect_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "charge_attack_anim" field.</summary>
    public const int ChargeAttackAnimFieldNumber = 19;
    private string chargeAttackAnim_ = "";
    /// <summary>
    ///* 冲锋攻击（跳跃）动画 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChargeAttackAnim {
      get { return chargeAttackAnim_; }
      set {
        chargeAttackAnim_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "common_spell_pre" field.</summary>
    public const int CommonSpellPreFieldNumber = 20;
    private string commonSpellPre_ = "";
    /// <summary>
    ///* 通用技能前摇 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommonSpellPre {
      get { return commonSpellPre_; }
      set {
        commonSpellPre_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "common_spell_post" field.</summary>
    public const int CommonSpellPostFieldNumber = 21;
    private string commonSpellPost_ = "";
    /// <summary>
    ///* 通用技能后摇 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CommonSpellPost {
      get { return commonSpellPost_; }
      set {
        commonSpellPost_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expression_laugh" field.</summary>
    public const int ExpressionLaughFieldNumber = 22;
    private string expressionLaugh_ = "";
    /// <summary>
    ///* 大笑 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpressionLaugh {
      get { return expressionLaugh_; }
      set {
        expressionLaugh_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expression_anger" field.</summary>
    public const int ExpressionAngerFieldNumber = 23;
    private string expressionAnger_ = "";
    /// <summary>
    ///* 愤怒 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpressionAnger {
      get { return expressionAnger_; }
      set {
        expressionAnger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expression_surprised" field.</summary>
    public const int ExpressionSurprisedFieldNumber = 24;
    private string expressionSurprised_ = "";
    /// <summary>
    ///* 惊讶 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpressionSurprised {
      get { return expressionSurprised_; }
      set {
        expressionSurprised_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expression_fear" field.</summary>
    public const int ExpressionFearFieldNumber = 25;
    private string expressionFear_ = "";
    /// <summary>
    ///* 恐惧 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpressionFear {
      get { return expressionFear_; }
      set {
        expressionFear_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expression_assault" field.</summary>
    public const int ExpressionAssaultFieldNumber = 26;
    private string expressionAssault_ = "";
    /// <summary>
    ///* 指挥冲锋 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpressionAssault {
      get { return expressionAssault_; }
      set {
        expressionAssault_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expression_injured" field.</summary>
    public const int ExpressionInjuredFieldNumber = 27;
    private string expressionInjured_ = "";
    /// <summary>
    ///* 受伤 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExpressionInjured {
      get { return expressionInjured_; }
      set {
        expressionInjured_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeneralAnimations_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeneralAnimations_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Path != other.Path) return false;
      if (RunAnim != other.RunAnim) return false;
      if(!commonSpellTrigger_.Equals(other.commonSpellTrigger_)) return false;
      if(!meleeInteractionAnim_.Equals(other.meleeInteractionAnim_)) return false;
      if(!rangeAnim_.Equals(other.rangeAnim_)) return false;
      if(!movingRangeAnim_.Equals(other.movingRangeAnim_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FristAnimPriority, other.FristAnimPriority)) return false;
      if(!meleeWavingEffect_.Equals(other.meleeWavingEffect_)) return false;
      if(!meleeInteractionHurtAnim_.Equals(other.meleeInteractionHurtAnim_)) return false;
      if (MoveRangehurt != other.MoveRangehurt) return false;
      if (ChargeAnim != other.ChargeAnim) return false;
      if (WalkAnim != other.WalkAnim) return false;
      if (IdleAnim != other.IdleAnim) return false;
      if (NormaldeadAnim != other.NormaldeadAnim) return false;
      if(!idleperfAnim_.Equals(other.idleperfAnim_)) return false;
      if(!flydeadAnim_.Equals(other.flydeadAnim_)) return false;
      if (FlydeadEffect != other.FlydeadEffect) return false;
      if (ChargeAttackAnim != other.ChargeAttackAnim) return false;
      if (CommonSpellPre != other.CommonSpellPre) return false;
      if (CommonSpellPost != other.CommonSpellPost) return false;
      if (ExpressionLaugh != other.ExpressionLaugh) return false;
      if (ExpressionAnger != other.ExpressionAnger) return false;
      if (ExpressionSurprised != other.ExpressionSurprised) return false;
      if (ExpressionFear != other.ExpressionFear) return false;
      if (ExpressionAssault != other.ExpressionAssault) return false;
      if (ExpressionInjured != other.ExpressionInjured) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (RunAnim.Length != 0) hash ^= RunAnim.GetHashCode();
      hash ^= commonSpellTrigger_.GetHashCode();
      hash ^= meleeInteractionAnim_.GetHashCode();
      hash ^= rangeAnim_.GetHashCode();
      hash ^= movingRangeAnim_.GetHashCode();
      if (FristAnimPriority != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FristAnimPriority);
      hash ^= meleeWavingEffect_.GetHashCode();
      hash ^= meleeInteractionHurtAnim_.GetHashCode();
      if (MoveRangehurt.Length != 0) hash ^= MoveRangehurt.GetHashCode();
      if (ChargeAnim.Length != 0) hash ^= ChargeAnim.GetHashCode();
      if (WalkAnim.Length != 0) hash ^= WalkAnim.GetHashCode();
      if (IdleAnim.Length != 0) hash ^= IdleAnim.GetHashCode();
      if (NormaldeadAnim.Length != 0) hash ^= NormaldeadAnim.GetHashCode();
      hash ^= idleperfAnim_.GetHashCode();
      hash ^= flydeadAnim_.GetHashCode();
      if (FlydeadEffect.Length != 0) hash ^= FlydeadEffect.GetHashCode();
      if (ChargeAttackAnim.Length != 0) hash ^= ChargeAttackAnim.GetHashCode();
      if (CommonSpellPre.Length != 0) hash ^= CommonSpellPre.GetHashCode();
      if (CommonSpellPost.Length != 0) hash ^= CommonSpellPost.GetHashCode();
      if (ExpressionLaugh.Length != 0) hash ^= ExpressionLaugh.GetHashCode();
      if (ExpressionAnger.Length != 0) hash ^= ExpressionAnger.GetHashCode();
      if (ExpressionSurprised.Length != 0) hash ^= ExpressionSurprised.GetHashCode();
      if (ExpressionFear.Length != 0) hash ^= ExpressionFear.GetHashCode();
      if (ExpressionAssault.Length != 0) hash ^= ExpressionAssault.GetHashCode();
      if (ExpressionInjured.Length != 0) hash ^= ExpressionInjured.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (RunAnim.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RunAnim);
      }
      commonSpellTrigger_.WriteTo(output, _repeated_commonSpellTrigger_codec);
      meleeInteractionAnim_.WriteTo(output, _repeated_meleeInteractionAnim_codec);
      rangeAnim_.WriteTo(output, _repeated_rangeAnim_codec);
      movingRangeAnim_.WriteTo(output, _repeated_movingRangeAnim_codec);
      if (FristAnimPriority != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(FristAnimPriority);
      }
      meleeWavingEffect_.WriteTo(output, _repeated_meleeWavingEffect_codec);
      meleeInteractionHurtAnim_.WriteTo(output, _repeated_meleeInteractionHurtAnim_codec);
      if (MoveRangehurt.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MoveRangehurt);
      }
      if (ChargeAnim.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ChargeAnim);
      }
      if (WalkAnim.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(WalkAnim);
      }
      if (IdleAnim.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(IdleAnim);
      }
      if (NormaldeadAnim.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(NormaldeadAnim);
      }
      idleperfAnim_.WriteTo(output, _repeated_idleperfAnim_codec);
      flydeadAnim_.WriteTo(output, _repeated_flydeadAnim_codec);
      if (FlydeadEffect.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(FlydeadEffect);
      }
      if (ChargeAttackAnim.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ChargeAttackAnim);
      }
      if (CommonSpellPre.Length != 0) {
        output.WriteRawTag(162, 1);
        output.WriteString(CommonSpellPre);
      }
      if (CommonSpellPost.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(CommonSpellPost);
      }
      if (ExpressionLaugh.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(ExpressionLaugh);
      }
      if (ExpressionAnger.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(ExpressionAnger);
      }
      if (ExpressionSurprised.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(ExpressionSurprised);
      }
      if (ExpressionFear.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(ExpressionFear);
      }
      if (ExpressionAssault.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(ExpressionAssault);
      }
      if (ExpressionInjured.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(ExpressionInjured);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (RunAnim.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RunAnim);
      }
      size += commonSpellTrigger_.CalculateSize(_repeated_commonSpellTrigger_codec);
      size += meleeInteractionAnim_.CalculateSize(_repeated_meleeInteractionAnim_codec);
      size += rangeAnim_.CalculateSize(_repeated_rangeAnim_codec);
      size += movingRangeAnim_.CalculateSize(_repeated_movingRangeAnim_codec);
      if (FristAnimPriority != 0F) {
        size += 1 + 4;
      }
      size += meleeWavingEffect_.CalculateSize(_repeated_meleeWavingEffect_codec);
      size += meleeInteractionHurtAnim_.CalculateSize(_repeated_meleeInteractionHurtAnim_codec);
      if (MoveRangehurt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MoveRangehurt);
      }
      if (ChargeAnim.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChargeAnim);
      }
      if (WalkAnim.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WalkAnim);
      }
      if (IdleAnim.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdleAnim);
      }
      if (NormaldeadAnim.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NormaldeadAnim);
      }
      size += idleperfAnim_.CalculateSize(_repeated_idleperfAnim_codec);
      size += flydeadAnim_.CalculateSize(_repeated_flydeadAnim_codec);
      if (FlydeadEffect.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FlydeadEffect);
      }
      if (ChargeAttackAnim.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChargeAttackAnim);
      }
      if (CommonSpellPre.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CommonSpellPre);
      }
      if (CommonSpellPost.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CommonSpellPost);
      }
      if (ExpressionLaugh.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpressionLaugh);
      }
      if (ExpressionAnger.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpressionAnger);
      }
      if (ExpressionSurprised.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpressionSurprised);
      }
      if (ExpressionFear.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpressionFear);
      }
      if (ExpressionAssault.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpressionAssault);
      }
      if (ExpressionInjured.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ExpressionInjured);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeneralAnimations_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.RunAnim.Length != 0) {
        RunAnim = other.RunAnim;
      }
      commonSpellTrigger_.Add(other.commonSpellTrigger_);
      meleeInteractionAnim_.Add(other.meleeInteractionAnim_);
      rangeAnim_.Add(other.rangeAnim_);
      movingRangeAnim_.Add(other.movingRangeAnim_);
      if (other.FristAnimPriority != 0F) {
        FristAnimPriority = other.FristAnimPriority;
      }
      meleeWavingEffect_.Add(other.meleeWavingEffect_);
      meleeInteractionHurtAnim_.Add(other.meleeInteractionHurtAnim_);
      if (other.MoveRangehurt.Length != 0) {
        MoveRangehurt = other.MoveRangehurt;
      }
      if (other.ChargeAnim.Length != 0) {
        ChargeAnim = other.ChargeAnim;
      }
      if (other.WalkAnim.Length != 0) {
        WalkAnim = other.WalkAnim;
      }
      if (other.IdleAnim.Length != 0) {
        IdleAnim = other.IdleAnim;
      }
      if (other.NormaldeadAnim.Length != 0) {
        NormaldeadAnim = other.NormaldeadAnim;
      }
      idleperfAnim_.Add(other.idleperfAnim_);
      flydeadAnim_.Add(other.flydeadAnim_);
      if (other.FlydeadEffect.Length != 0) {
        FlydeadEffect = other.FlydeadEffect;
      }
      if (other.ChargeAttackAnim.Length != 0) {
        ChargeAttackAnim = other.ChargeAttackAnim;
      }
      if (other.CommonSpellPre.Length != 0) {
        CommonSpellPre = other.CommonSpellPre;
      }
      if (other.CommonSpellPost.Length != 0) {
        CommonSpellPost = other.CommonSpellPost;
      }
      if (other.ExpressionLaugh.Length != 0) {
        ExpressionLaugh = other.ExpressionLaugh;
      }
      if (other.ExpressionAnger.Length != 0) {
        ExpressionAnger = other.ExpressionAnger;
      }
      if (other.ExpressionSurprised.Length != 0) {
        ExpressionSurprised = other.ExpressionSurprised;
      }
      if (other.ExpressionFear.Length != 0) {
        ExpressionFear = other.ExpressionFear;
      }
      if (other.ExpressionAssault.Length != 0) {
        ExpressionAssault = other.ExpressionAssault;
      }
      if (other.ExpressionInjured.Length != 0) {
        ExpressionInjured = other.ExpressionInjured;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 26: {
            RunAnim = input.ReadString();
            break;
          }
          case 34: {
            commonSpellTrigger_.AddEntriesFrom(input, _repeated_commonSpellTrigger_codec);
            break;
          }
          case 42: {
            meleeInteractionAnim_.AddEntriesFrom(input, _repeated_meleeInteractionAnim_codec);
            break;
          }
          case 50: {
            rangeAnim_.AddEntriesFrom(input, _repeated_rangeAnim_codec);
            break;
          }
          case 58: {
            movingRangeAnim_.AddEntriesFrom(input, _repeated_movingRangeAnim_codec);
            break;
          }
          case 69: {
            FristAnimPriority = input.ReadFloat();
            break;
          }
          case 74: {
            meleeWavingEffect_.AddEntriesFrom(input, _repeated_meleeWavingEffect_codec);
            break;
          }
          case 82: {
            meleeInteractionHurtAnim_.AddEntriesFrom(input, _repeated_meleeInteractionHurtAnim_codec);
            break;
          }
          case 90: {
            MoveRangehurt = input.ReadString();
            break;
          }
          case 98: {
            ChargeAnim = input.ReadString();
            break;
          }
          case 106: {
            WalkAnim = input.ReadString();
            break;
          }
          case 114: {
            IdleAnim = input.ReadString();
            break;
          }
          case 122: {
            NormaldeadAnim = input.ReadString();
            break;
          }
          case 130: {
            idleperfAnim_.AddEntriesFrom(input, _repeated_idleperfAnim_codec);
            break;
          }
          case 138: {
            flydeadAnim_.AddEntriesFrom(input, _repeated_flydeadAnim_codec);
            break;
          }
          case 146: {
            FlydeadEffect = input.ReadString();
            break;
          }
          case 154: {
            ChargeAttackAnim = input.ReadString();
            break;
          }
          case 162: {
            CommonSpellPre = input.ReadString();
            break;
          }
          case 170: {
            CommonSpellPost = input.ReadString();
            break;
          }
          case 178: {
            ExpressionLaugh = input.ReadString();
            break;
          }
          case 186: {
            ExpressionAnger = input.ReadString();
            break;
          }
          case 194: {
            ExpressionSurprised = input.ReadString();
            break;
          }
          case 202: {
            ExpressionFear = input.ReadString();
            break;
          }
          case 210: {
            ExpressionAssault = input.ReadString();
            break;
          }
          case 218: {
            ExpressionInjured = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GeneralAnimations_Config_Data : pb::IMessage<GeneralAnimations_Config_Data> {
    private static readonly pb::MessageParser<GeneralAnimations_Config_Data> _parser = new pb::MessageParser<GeneralAnimations_Config_Data>(() => new GeneralAnimations_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GeneralAnimations_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.GeneralAnimationsConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralAnimations_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralAnimations_Config_Data(GeneralAnimations_Config_Data other) : this() {
      generalAnimationsConfigItems_ = other.generalAnimationsConfigItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GeneralAnimations_Config_Data Clone() {
      return new GeneralAnimations_Config_Data(this);
    }

    /// <summary>Field number for the "GeneralAnimations_Config_items" field.</summary>
    public const int GeneralAnimationsConfigItemsFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::ConfigData.GeneralAnimations_Config>.Codec _map_generalAnimationsConfigItems_codec
        = new pbc::MapField<uint, global::ConfigData.GeneralAnimations_Config>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::ConfigData.GeneralAnimations_Config.Parser), 10);
    private readonly pbc::MapField<uint, global::ConfigData.GeneralAnimations_Config> generalAnimationsConfigItems_ = new pbc::MapField<uint, global::ConfigData.GeneralAnimations_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::ConfigData.GeneralAnimations_Config> GeneralAnimationsConfigItems {
      get { return generalAnimationsConfigItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GeneralAnimations_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GeneralAnimations_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!GeneralAnimationsConfigItems.Equals(other.GeneralAnimationsConfigItems)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= GeneralAnimationsConfigItems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      generalAnimationsConfigItems_.WriteTo(output, _map_generalAnimationsConfigItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += generalAnimationsConfigItems_.CalculateSize(_map_generalAnimationsConfigItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GeneralAnimations_Config_Data other) {
      if (other == null) {
        return;
      }
      generalAnimationsConfigItems_.Add(other.generalAnimationsConfigItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            generalAnimationsConfigItems_.AddEntriesFrom(input, _map_generalAnimationsConfigItems_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
