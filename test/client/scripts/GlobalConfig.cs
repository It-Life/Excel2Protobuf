// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Global_Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ConfigData {

  /// <summary>Holder for reflection information generated from Global_Config.proto</summary>
  public static partial class GlobalConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Global_Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GlobalConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNHbG9iYWxfQ29uZmlnLnByb3RvEgpDb25maWdEYXRhIj4KDUdsb2JhbF9D",
            "b25maWcSCgoCaWQYASABKA0SDAoEbmFtZRgCIAEoCRITCgtwYXJhbV92YWx1",
            "ZRgDIAEoCSLvAQoOUXVhbGl0eV9Db25maWcSCgoCaWQYASABKA0SDwoHbG9k",
            "X2RpcxgCIAEoAhISCgplZmZlY3RfbG9kGAMgASgFEh8KF2JhdHRsZV9zY2Vu",
            "ZV9lZmZlY3RfbG9kGAQgASgFEhcKD3dhbGtfc21va2VfcmF0ZRgFIAEoAhIZ",
            "ChFjaGFyZ2Vfc21va2VfcmF0ZRgGIAEoAhIZChFzYWJlcl9lZmZlY3RfcmF0",
            "ZRgHIAEoAhIdChVtZWxlZV9oaXRfZWZmZWN0X3JhdGUYCCABKAISHQoVcmFu",
            "Z2VfaGl0X2VmZmVjdF9yYXRlGAkgASgCIuoCChJHbG9iYWxfQ29uZmlnX0Rh",
            "dGESUgoTR2xvYmFsX0NvbmZpZ19pdGVtcxgBIAMoCzI1LkNvbmZpZ0RhdGEu",
            "R2xvYmFsX0NvbmZpZ19EYXRhLkdsb2JhbENvbmZpZ0l0ZW1zRW50cnkSVAoU",
            "UXVhbGl0eV9Db25maWdfaXRlbXMYAiADKAsyNi5Db25maWdEYXRhLkdsb2Jh",
            "bF9Db25maWdfRGF0YS5RdWFsaXR5Q29uZmlnSXRlbXNFbnRyeRpTChZHbG9i",
            "YWxDb25maWdJdGVtc0VudHJ5EgsKA2tleRgBIAEoDRIoCgV2YWx1ZRgCIAEo",
            "CzIZLkNvbmZpZ0RhdGEuR2xvYmFsX0NvbmZpZzoCOAEaVQoXUXVhbGl0eUNv",
            "bmZpZ0l0ZW1zRW50cnkSCwoDa2V5GAEgASgNEikKBXZhbHVlGAIgASgLMhou",
            "Q29uZmlnRGF0YS5RdWFsaXR5X0NvbmZpZzoCOAFCIwohY29tLnRyaW5pdGln",
            "YW1lcy5zZXJ2ZXIuY29uZi5hdXRvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Global_Config), global::ConfigData.Global_Config.Parser, new[]{ "Id", "Name", "ParamValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Quality_Config), global::ConfigData.Quality_Config.Parser, new[]{ "Id", "LodDis", "EffectLod", "BattleSceneEffectLod", "WalkSmokeRate", "ChargeSmokeRate", "SaberEffectRate", "MeleeHitEffectRate", "RangeHitEffectRate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Global_Config_Data), global::ConfigData.Global_Config_Data.Parser, new[]{ "GlobalConfigItems", "QualityConfigItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Global_Config : pb::IMessage<Global_Config> {
    private static readonly pb::MessageParser<Global_Config> _parser = new pb::MessageParser<Global_Config>(() => new Global_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Global_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.GlobalConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_Config(Global_Config other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      paramValue_ = other.paramValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_Config Clone() {
      return new Global_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 1.0 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///* 参数 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param_value" field.</summary>
    public const int ParamValueFieldNumber = 3;
    private string paramValue_ = "";
    /// <summary>
    ///* 值 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParamValue {
      get { return paramValue_; }
      set {
        paramValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Global_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Global_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (ParamValue != other.ParamValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ParamValue.Length != 0) hash ^= ParamValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (ParamValue.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParamValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ParamValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParamValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Global_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ParamValue.Length != 0) {
        ParamValue = other.ParamValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            ParamValue = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quality_Config : pb::IMessage<Quality_Config> {
    private static readonly pb::MessageParser<Quality_Config> _parser = new pb::MessageParser<Quality_Config>(() => new Quality_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quality_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.GlobalConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quality_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quality_Config(Quality_Config other) : this() {
      id_ = other.id_;
      lodDis_ = other.lodDis_;
      effectLod_ = other.effectLod_;
      battleSceneEffectLod_ = other.battleSceneEffectLod_;
      walkSmokeRate_ = other.walkSmokeRate_;
      chargeSmokeRate_ = other.chargeSmokeRate_;
      saberEffectRate_ = other.saberEffectRate_;
      meleeHitEffectRate_ = other.meleeHitEffectRate_;
      rangeHitEffectRate_ = other.rangeHitEffectRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quality_Config Clone() {
      return new Quality_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 游戏效果等级 越大越好 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "lod_dis" field.</summary>
    public const int LodDisFieldNumber = 2;
    private float lodDis_;
    /// <summary>
    ///* 使用高模的镜头距离 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LodDis {
      get { return lodDis_; }
      set {
        lodDis_ = value;
      }
    }

    /// <summary>Field number for the "effect_lod" field.</summary>
    public const int EffectLodFieldNumber = 3;
    private int effectLod_;
    /// <summary>
    ///*  
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectLod {
      get { return effectLod_; }
      set {
        effectLod_ = value;
      }
    }

    /// <summary>Field number for the "battle_scene_effect_lod" field.</summary>
    public const int BattleSceneEffectLodFieldNumber = 4;
    private int battleSceneEffectLod_;
    /// <summary>
    ///* 战斗场景特效开启lod（数字越大效果越好） 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattleSceneEffectLod {
      get { return battleSceneEffectLod_; }
      set {
        battleSceneEffectLod_ = value;
      }
    }

    /// <summary>Field number for the "walk_smoke_rate" field.</summary>
    public const int WalkSmokeRateFieldNumber = 5;
    private float walkSmokeRate_;
    /// <summary>
    ///* 跑步尾部特效使用概率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WalkSmokeRate {
      get { return walkSmokeRate_; }
      set {
        walkSmokeRate_ = value;
      }
    }

    /// <summary>Field number for the "charge_smoke_rate" field.</summary>
    public const int ChargeSmokeRateFieldNumber = 6;
    private float chargeSmokeRate_;
    /// <summary>
    ///* 冲锋特效使用概率 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ChargeSmokeRate {
      get { return chargeSmokeRate_; }
      set {
        chargeSmokeRate_ = value;
      }
    }

    /// <summary>Field number for the "saber_effect_rate" field.</summary>
    public const int SaberEffectRateFieldNumber = 7;
    private float saberEffectRate_;
    /// <summary>
    ///* 刀光特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SaberEffectRate {
      get { return saberEffectRate_; }
      set {
        saberEffectRate_ = value;
      }
    }

    /// <summary>Field number for the "melee_hit_effect_rate" field.</summary>
    public const int MeleeHitEffectRateFieldNumber = 8;
    private float meleeHitEffectRate_;
    /// <summary>
    ///* 近战命中特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MeleeHitEffectRate {
      get { return meleeHitEffectRate_; }
      set {
        meleeHitEffectRate_ = value;
      }
    }

    /// <summary>Field number for the "range_hit_effect_rate" field.</summary>
    public const int RangeHitEffectRateFieldNumber = 9;
    private float rangeHitEffectRate_;
    /// <summary>
    ///* 远程命中特效 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RangeHitEffectRate {
      get { return rangeHitEffectRate_; }
      set {
        rangeHitEffectRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quality_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quality_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LodDis, other.LodDis)) return false;
      if (EffectLod != other.EffectLod) return false;
      if (BattleSceneEffectLod != other.BattleSceneEffectLod) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WalkSmokeRate, other.WalkSmokeRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ChargeSmokeRate, other.ChargeSmokeRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SaberEffectRate, other.SaberEffectRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MeleeHitEffectRate, other.MeleeHitEffectRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RangeHitEffectRate, other.RangeHitEffectRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (LodDis != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LodDis);
      if (EffectLod != 0) hash ^= EffectLod.GetHashCode();
      if (BattleSceneEffectLod != 0) hash ^= BattleSceneEffectLod.GetHashCode();
      if (WalkSmokeRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WalkSmokeRate);
      if (ChargeSmokeRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ChargeSmokeRate);
      if (SaberEffectRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SaberEffectRate);
      if (MeleeHitEffectRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MeleeHitEffectRate);
      if (RangeHitEffectRate != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RangeHitEffectRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (LodDis != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(LodDis);
      }
      if (EffectLod != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EffectLod);
      }
      if (BattleSceneEffectLod != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BattleSceneEffectLod);
      }
      if (WalkSmokeRate != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(WalkSmokeRate);
      }
      if (ChargeSmokeRate != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(ChargeSmokeRate);
      }
      if (SaberEffectRate != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(SaberEffectRate);
      }
      if (MeleeHitEffectRate != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(MeleeHitEffectRate);
      }
      if (RangeHitEffectRate != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(RangeHitEffectRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (LodDis != 0F) {
        size += 1 + 4;
      }
      if (EffectLod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectLod);
      }
      if (BattleSceneEffectLod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleSceneEffectLod);
      }
      if (WalkSmokeRate != 0F) {
        size += 1 + 4;
      }
      if (ChargeSmokeRate != 0F) {
        size += 1 + 4;
      }
      if (SaberEffectRate != 0F) {
        size += 1 + 4;
      }
      if (MeleeHitEffectRate != 0F) {
        size += 1 + 4;
      }
      if (RangeHitEffectRate != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quality_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.LodDis != 0F) {
        LodDis = other.LodDis;
      }
      if (other.EffectLod != 0) {
        EffectLod = other.EffectLod;
      }
      if (other.BattleSceneEffectLod != 0) {
        BattleSceneEffectLod = other.BattleSceneEffectLod;
      }
      if (other.WalkSmokeRate != 0F) {
        WalkSmokeRate = other.WalkSmokeRate;
      }
      if (other.ChargeSmokeRate != 0F) {
        ChargeSmokeRate = other.ChargeSmokeRate;
      }
      if (other.SaberEffectRate != 0F) {
        SaberEffectRate = other.SaberEffectRate;
      }
      if (other.MeleeHitEffectRate != 0F) {
        MeleeHitEffectRate = other.MeleeHitEffectRate;
      }
      if (other.RangeHitEffectRate != 0F) {
        RangeHitEffectRate = other.RangeHitEffectRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 21: {
            LodDis = input.ReadFloat();
            break;
          }
          case 24: {
            EffectLod = input.ReadInt32();
            break;
          }
          case 32: {
            BattleSceneEffectLod = input.ReadInt32();
            break;
          }
          case 45: {
            WalkSmokeRate = input.ReadFloat();
            break;
          }
          case 53: {
            ChargeSmokeRate = input.ReadFloat();
            break;
          }
          case 61: {
            SaberEffectRate = input.ReadFloat();
            break;
          }
          case 69: {
            MeleeHitEffectRate = input.ReadFloat();
            break;
          }
          case 77: {
            RangeHitEffectRate = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Global_Config_Data : pb::IMessage<Global_Config_Data> {
    private static readonly pb::MessageParser<Global_Config_Data> _parser = new pb::MessageParser<Global_Config_Data>(() => new Global_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Global_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.GlobalConfigReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_Config_Data(Global_Config_Data other) : this() {
      globalConfigItems_ = other.globalConfigItems_.Clone();
      qualityConfigItems_ = other.qualityConfigItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Global_Config_Data Clone() {
      return new Global_Config_Data(this);
    }

    /// <summary>Field number for the "Global_Config_items" field.</summary>
    public const int GlobalConfigItemsFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::ConfigData.Global_Config>.Codec _map_globalConfigItems_codec
        = new pbc::MapField<uint, global::ConfigData.Global_Config>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::ConfigData.Global_Config.Parser), 10);
    private readonly pbc::MapField<uint, global::ConfigData.Global_Config> globalConfigItems_ = new pbc::MapField<uint, global::ConfigData.Global_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::ConfigData.Global_Config> GlobalConfigItems {
      get { return globalConfigItems_; }
    }

    /// <summary>Field number for the "Quality_Config_items" field.</summary>
    public const int QualityConfigItemsFieldNumber = 2;
    private static readonly pbc::MapField<uint, global::ConfigData.Quality_Config>.Codec _map_qualityConfigItems_codec
        = new pbc::MapField<uint, global::ConfigData.Quality_Config>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::ConfigData.Quality_Config.Parser), 18);
    private readonly pbc::MapField<uint, global::ConfigData.Quality_Config> qualityConfigItems_ = new pbc::MapField<uint, global::ConfigData.Quality_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::ConfigData.Quality_Config> QualityConfigItems {
      get { return qualityConfigItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Global_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Global_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!GlobalConfigItems.Equals(other.GlobalConfigItems)) return false;
      if (!QualityConfigItems.Equals(other.QualityConfigItems)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= GlobalConfigItems.GetHashCode();
      hash ^= QualityConfigItems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      globalConfigItems_.WriteTo(output, _map_globalConfigItems_codec);
      qualityConfigItems_.WriteTo(output, _map_qualityConfigItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += globalConfigItems_.CalculateSize(_map_globalConfigItems_codec);
      size += qualityConfigItems_.CalculateSize(_map_qualityConfigItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Global_Config_Data other) {
      if (other == null) {
        return;
      }
      globalConfigItems_.Add(other.globalConfigItems_);
      qualityConfigItems_.Add(other.qualityConfigItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            globalConfigItems_.AddEntriesFrom(input, _map_globalConfigItems_codec);
            break;
          }
          case 18: {
            qualityConfigItems_.AddEntriesFrom(input, _map_qualityConfigItems_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
