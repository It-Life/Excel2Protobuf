// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Scenes_Config.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace ConfigData {

  /// <summary>Holder for reflection information generated from Scenes_Config.proto</summary>
  public static partial class ScenesConfigReflection {

    #region Descriptor
    /// <summary>File descriptor for Scenes_Config.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ScenesConfigReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNTY2VuZXNfQ29uZmlnLnByb3RvEgpDb25maWdEYXRhIoACCg1TY2VuZXNf",
            "Q29uZmlnEgoKAmlkGAEgASgNEgwKBG5hbWUYAiABKAkSDgoGc2NlbmVzGAMg",
            "ASgJEgwKBHRpbWUYBCABKAUSDAoEbW9kZRgFIAEoBRIVCg1nYW1lcGxheV9t",
            "b2RlGAYgASgIEg8KB2NvbmZpcm0YByABKAgSDAoEaGlkZRgIIAEoCBIPCgd0",
            "cmlnZ2VyGAkgASgJEgwKBHJvbGUYCiABKAkSDgoGZGlhbG9nGAsgASgJEgsK",
            "A3B2ZRgMIAEoCBIMCgRjb3N0GA0gASgFEgwKBHNraXAYDiABKAUSDwoHdmlj",
            "dG9yeRgPIAEoCRIKCgJsdhgQIAEoBSK9AQoSU2NlbmVzX0NvbmZpZ19EYXRh",
            "ElIKE1NjZW5lc19Db25maWdfaXRlbXMYASADKAsyNS5Db25maWdEYXRhLlNj",
            "ZW5lc19Db25maWdfRGF0YS5TY2VuZXNDb25maWdJdGVtc0VudHJ5GlMKFlNj",
            "ZW5lc0NvbmZpZ0l0ZW1zRW50cnkSCwoDa2V5GAEgASgNEigKBXZhbHVlGAIg",
            "ASgLMhkuQ29uZmlnRGF0YS5TY2VuZXNfQ29uZmlnOgI4AUIjCiFjb20udHJp",
            "bml0aWdhbWVzLnNlcnZlci5jb25mLmF1dG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Scenes_Config), global::ConfigData.Scenes_Config.Parser, new[]{ "Id", "Name", "Scenes", "Time", "Mode", "GameplayMode", "Confirm", "Hide", "Trigger", "Role", "Dialog", "Pve", "Cost", "Skip", "Victory", "Lv" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::ConfigData.Scenes_Config_Data), global::ConfigData.Scenes_Config_Data.Parser, new[]{ "ScenesConfigItems" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Scenes_Config : pb::IMessage<Scenes_Config> {
    private static readonly pb::MessageParser<Scenes_Config> _parser = new pb::MessageParser<Scenes_Config>(() => new Scenes_Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scenes_Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.ScenesConfigReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenes_Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenes_Config(Scenes_Config other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      scenes_ = other.scenes_;
      time_ = other.time_;
      mode_ = other.mode_;
      gameplayMode_ = other.gameplayMode_;
      confirm_ = other.confirm_;
      hide_ = other.hide_;
      trigger_ = other.trigger_;
      role_ = other.role_;
      dialog_ = other.dialog_;
      pve_ = other.pve_;
      cost_ = other.cost_;
      skip_ = other.skip_;
      victory_ = other.victory_;
      lv_ = other.lv_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenes_Config Clone() {
      return new Scenes_Config(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    /// <summary>
    ///* 标示 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///* 名字 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scenes" field.</summary>
    public const int ScenesFieldNumber = 3;
    private string scenes_ = "";
    /// <summary>
    ///* 场景 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Scenes {
      get { return scenes_; }
      set {
        scenes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 4;
    private int time_;
    /// <summary>
    ///* 场景时间 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 5;
    private int mode_;
    /// <summary>
    ///* 敌兵随机模式 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    /// <summary>Field number for the "gameplay_mode" field.</summary>
    public const int GameplayModeFieldNumber = 6;
    private bool gameplayMode_;
    /// <summary>
    ///* 游戏模式0 RTS 1 无双 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GameplayMode {
      get { return gameplayMode_; }
      set {
        gameplayMode_ = value;
      }
    }

    /// <summary>Field number for the "confirm" field.</summary>
    public const int ConfirmFieldNumber = 7;
    private bool confirm_;
    /// <summary>
    ///* W确认关卡 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Confirm {
      get { return confirm_; }
      set {
        confirm_ = value;
      }
    }

    /// <summary>Field number for the "hide" field.</summary>
    public const int HideFieldNumber = 8;
    private bool hide_;
    /// <summary>
    ///* 是否显示 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Hide {
      get { return hide_; }
      set {
        hide_ = value;
      }
    }

    /// <summary>Field number for the "trigger" field.</summary>
    public const int TriggerFieldNumber = 9;
    private string trigger_ = "";
    /// <summary>
    ///* 场景模板 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Trigger {
      get { return trigger_; }
      set {
        trigger_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 10;
    private string role_ = "";
    /// <summary>
    ///* 角色 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Role {
      get { return role_; }
      set {
        role_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dialog" field.</summary>
    public const int DialogFieldNumber = 11;
    private string dialog_ = "";
    /// <summary>
    ///* 场景对话 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Dialog {
      get { return dialog_; }
      set {
        dialog_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pve" field.</summary>
    public const int PveFieldNumber = 12;
    private bool pve_;
    /// <summary>
    ///* 不创建敌方布阵点 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Pve {
      get { return pve_; }
      set {
        pve_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 13;
    private int cost_;
    /// <summary>
    ///* 部队最大上阵数量 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "skip" field.</summary>
    public const int SkipFieldNumber = 14;
    private int skip_;
    /// <summary>
    ///* 不能跳过 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Skip {
      get { return skip_; }
      set {
        skip_ = value;
      }
    }

    /// <summary>Field number for the "victory" field.</summary>
    public const int VictoryFieldNumber = 15;
    private string victory_ = "";
    /// <summary>
    ///* 胜利目标语言包ID 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Victory {
      get { return victory_; }
      set {
        victory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lv" field.</summary>
    public const int LvFieldNumber = 16;
    private int lv_;
    /// <summary>
    ///* pvp模板适用等级 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lv {
      get { return lv_; }
      set {
        lv_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scenes_Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scenes_Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Scenes != other.Scenes) return false;
      if (Time != other.Time) return false;
      if (Mode != other.Mode) return false;
      if (GameplayMode != other.GameplayMode) return false;
      if (Confirm != other.Confirm) return false;
      if (Hide != other.Hide) return false;
      if (Trigger != other.Trigger) return false;
      if (Role != other.Role) return false;
      if (Dialog != other.Dialog) return false;
      if (Pve != other.Pve) return false;
      if (Cost != other.Cost) return false;
      if (Skip != other.Skip) return false;
      if (Victory != other.Victory) return false;
      if (Lv != other.Lv) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Scenes.Length != 0) hash ^= Scenes.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (GameplayMode != false) hash ^= GameplayMode.GetHashCode();
      if (Confirm != false) hash ^= Confirm.GetHashCode();
      if (Hide != false) hash ^= Hide.GetHashCode();
      if (Trigger.Length != 0) hash ^= Trigger.GetHashCode();
      if (Role.Length != 0) hash ^= Role.GetHashCode();
      if (Dialog.Length != 0) hash ^= Dialog.GetHashCode();
      if (Pve != false) hash ^= Pve.GetHashCode();
      if (Cost != 0) hash ^= Cost.GetHashCode();
      if (Skip != 0) hash ^= Skip.GetHashCode();
      if (Victory.Length != 0) hash ^= Victory.GetHashCode();
      if (Lv != 0) hash ^= Lv.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Scenes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Scenes);
      }
      if (Time != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Time);
      }
      if (Mode != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Mode);
      }
      if (GameplayMode != false) {
        output.WriteRawTag(48);
        output.WriteBool(GameplayMode);
      }
      if (Confirm != false) {
        output.WriteRawTag(56);
        output.WriteBool(Confirm);
      }
      if (Hide != false) {
        output.WriteRawTag(64);
        output.WriteBool(Hide);
      }
      if (Trigger.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Trigger);
      }
      if (Role.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Role);
      }
      if (Dialog.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Dialog);
      }
      if (Pve != false) {
        output.WriteRawTag(96);
        output.WriteBool(Pve);
      }
      if (Cost != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Cost);
      }
      if (Skip != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Skip);
      }
      if (Victory.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Victory);
      }
      if (Lv != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Lv);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Scenes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Scenes);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
      }
      if (GameplayMode != false) {
        size += 1 + 1;
      }
      if (Confirm != false) {
        size += 1 + 1;
      }
      if (Hide != false) {
        size += 1 + 1;
      }
      if (Trigger.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Trigger);
      }
      if (Role.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Role);
      }
      if (Dialog.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Dialog);
      }
      if (Pve != false) {
        size += 1 + 1;
      }
      if (Cost != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
      }
      if (Skip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Skip);
      }
      if (Victory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Victory);
      }
      if (Lv != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Lv);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scenes_Config other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Scenes.Length != 0) {
        Scenes = other.Scenes;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      if (other.GameplayMode != false) {
        GameplayMode = other.GameplayMode;
      }
      if (other.Confirm != false) {
        Confirm = other.Confirm;
      }
      if (other.Hide != false) {
        Hide = other.Hide;
      }
      if (other.Trigger.Length != 0) {
        Trigger = other.Trigger;
      }
      if (other.Role.Length != 0) {
        Role = other.Role;
      }
      if (other.Dialog.Length != 0) {
        Dialog = other.Dialog;
      }
      if (other.Pve != false) {
        Pve = other.Pve;
      }
      if (other.Cost != 0) {
        Cost = other.Cost;
      }
      if (other.Skip != 0) {
        Skip = other.Skip;
      }
      if (other.Victory.Length != 0) {
        Victory = other.Victory;
      }
      if (other.Lv != 0) {
        Lv = other.Lv;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Scenes = input.ReadString();
            break;
          }
          case 32: {
            Time = input.ReadInt32();
            break;
          }
          case 40: {
            Mode = input.ReadInt32();
            break;
          }
          case 48: {
            GameplayMode = input.ReadBool();
            break;
          }
          case 56: {
            Confirm = input.ReadBool();
            break;
          }
          case 64: {
            Hide = input.ReadBool();
            break;
          }
          case 74: {
            Trigger = input.ReadString();
            break;
          }
          case 82: {
            Role = input.ReadString();
            break;
          }
          case 90: {
            Dialog = input.ReadString();
            break;
          }
          case 96: {
            Pve = input.ReadBool();
            break;
          }
          case 104: {
            Cost = input.ReadInt32();
            break;
          }
          case 112: {
            Skip = input.ReadInt32();
            break;
          }
          case 122: {
            Victory = input.ReadString();
            break;
          }
          case 128: {
            Lv = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scenes_Config_Data : pb::IMessage<Scenes_Config_Data> {
    private static readonly pb::MessageParser<Scenes_Config_Data> _parser = new pb::MessageParser<Scenes_Config_Data>(() => new Scenes_Config_Data());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scenes_Config_Data> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::ConfigData.ScenesConfigReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenes_Config_Data() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenes_Config_Data(Scenes_Config_Data other) : this() {
      scenesConfigItems_ = other.scenesConfigItems_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scenes_Config_Data Clone() {
      return new Scenes_Config_Data(this);
    }

    /// <summary>Field number for the "Scenes_Config_items" field.</summary>
    public const int ScenesConfigItemsFieldNumber = 1;
    private static readonly pbc::MapField<uint, global::ConfigData.Scenes_Config>.Codec _map_scenesConfigItems_codec
        = new pbc::MapField<uint, global::ConfigData.Scenes_Config>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForMessage(18, global::ConfigData.Scenes_Config.Parser), 10);
    private readonly pbc::MapField<uint, global::ConfigData.Scenes_Config> scenesConfigItems_ = new pbc::MapField<uint, global::ConfigData.Scenes_Config>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::ConfigData.Scenes_Config> ScenesConfigItems {
      get { return scenesConfigItems_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scenes_Config_Data);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scenes_Config_Data other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!ScenesConfigItems.Equals(other.ScenesConfigItems)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= ScenesConfigItems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      scenesConfigItems_.WriteTo(output, _map_scenesConfigItems_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += scenesConfigItems_.CalculateSize(_map_scenesConfigItems_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scenes_Config_Data other) {
      if (other == null) {
        return;
      }
      scenesConfigItems_.Add(other.scenesConfigItems_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            scenesConfigItems_.AddEntriesFrom(input, _map_scenesConfigItems_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
